package nju.software.manager.dean;

import java.io.IOException;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import nju.software.entity.Defence;
import nju.software.entity.Fee;
import nju.software.entity.Judge;
import nju.software.entity.Paper;
import nju.software.entity.Student;
import nju.software.entity.Suggestion;
import nju.software.entity.Teacher;
import nju.software.entity.enums.PaperState;
import nju.software.entity.enums.TeacherEducation;
import nju.software.entity.enums.TeacherJobTitle;
import nju.software.entity.enums.TeacherType;
import nju.software.jsonmodel.FinalizedDefenseTask;
import nju.software.jsonmodel.JsonDefenseAssigned;
import nju.software.jsonmodel.JsonJudgeAssigned;
import nju.software.jsonmodel.JsonStudent;
import nju.software.jsonmodel.JsonTeacher;
import nju.software.jsonmodel.JwCheckPaper;
import nju.software.service.AccountService;
import nju.software.service.AssignService;
import nju.software.service.DefenceService;
import nju.software.service.FeeService;
import nju.software.service.JudgeService;
import nju.software.service.PaperService;
import nju.software.service.ReportService;
import nju.software.service.StudentService;
import nju.software.service.SuggestionService;
import nju.software.service.TeacherService;
import nju.software.util.ActivitiAPIUtils;
import nju.software.util.Constants;
import nju.software.util.ExcelUtil;
import nju.software.util.JSONUtil;
import nju.software.web.vo.PaperVO;

import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.commons.lang3.Validate;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

@Component
public class DeanPaperManager {
	@Autowired
	private ActivitiAPIUtils activitiAPIUtils;
	@Autowired
	private StudentService studentService;
	@Autowired
	private TeacherService teacherService;
	@Autowired
	private PaperService paperService;
	@Autowired
	private AssignService assignService;
	@Autowired
	private JudgeService judgeService;
	@Autowired
	private DefenceService defenceService;
	@Autowired
	private FeeService feeService;
	@Autowired
	private ReportService reportService;
	@Autowired
	private AccountService accountService;
	@Autowired
	private SuggestionService suggestionService;

	@Autowired
	private JSONUtil jsonUtil;

	private static final Logger LOGGER = LoggerFactory.getLogger(DeanPaperManager.class);

	/**
	 * 分配导师后向老师和学生发送会话
	 * @param studentId
	 * @param teacherId
	 * @param deanNumber 教务员教师号
	 */
	public void sendAssignTutorSuggestion(Integer studentId, Integer teacherId, String deanNumber) {
		Student s = studentService.getStudentById(studentId);
		Teacher t = teacherService.getTeacherById(teacherId);

		Validate.notNull(s);
		Validate.notNull(t);

		String title_student = "导师分配已完成";
		String title_teacher = "导师分配已完成";
		String content_student = "你已被分配到导师" + t.getTeacherName() + "处进行毕业论文工作，" 
				+ "请提交开题报告。";
		String content_teacher = "学生" + s.getStudentName() + "(学号" + 
				s.getStudentNumber() + ")已被分配给你进行毕业论文的指导。";

		sendSuggestion(s.getStudentNumber(), deanNumber, title_student, content_student, 0);
		sendSuggestion(t.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
	}

	/**
	 * 重复率检查后发送会话
	 * @param paper
	 */
	public void sendAfterDetectionSuggestion(Paper paper, String deanNumber) {
		Student s = studentService.getStudentById(paper.getStudentId());
		Teacher t = teacherService.getTeacherById(s.getTeacherId());

		Validate.notNull(s);
		Validate.notNull(t);

		String title_student = "";
		String title_teacher = "";
		String content_student = "";
		String content_teacher = "";

		if(paper.getPaperState() == PaperState.DETECTION_PASSED) {
			title_student = "论文通过重复率检测";
			title_teacher = "学生" + s.getStudentName() + "的论文通过重复率检测";
			content_student = "你的论文已经通过重复率检测，请等待教务员分配评审老师";
			content_teacher = "您的学生" + s.getStudentName() + "（学号" + s.getStudentNumber() + 
					"）的论文已经通过重复率检测，请等待教务员分配评审老师";
		} else if (paper.getPaperState() == PaperState.UNCOMMITED){
			title_student = "论文未通过重复率检测";
			title_teacher = "学生" + s.getStudentName() + "的论文未通过重复率检测";
			content_student = "你的论文没有通过重复率检测，请修改论文后重新提交";
			content_teacher = "您的学生" + s.getStudentName() + "（学号" + s.getStudentNumber() + 
					"）的论文没有通过重复率检测，请等待学生重新提交论文";
		} else {
			return;
		}

		sendSuggestion(s.getStudentNumber(), deanNumber, title_student, content_student, 0);
		sendSuggestion(t.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
	}

	/**
	 * 分配评审完成后会话
	 * @param studentId
	 * @param innerId	内部教师id
	 * @param outerId	外部教师id
	 * @param deanNumber
	 */
	public void sendAfterAssignJudgeSuggestion(Integer studentId, Integer innerId, 
			Integer outerId, String deanNumber, Integer paperId) {
		Student s = studentService.getStudentById(studentId);
		Teacher innerTeacher = teacherService.getTeacherById(innerId);
		Teacher outTeacher = teacherService.getTeacherById(outerId);

		Validate.notNull(s);
		Validate.notNull(innerTeacher);
		Validate.notNull(outTeacher);

		String title_student = "评审老师分配完成";
		String title_teacher = "您被分配进行学生" + s.getStudentName() + "的论文评审工作";
		String content_student = "你的论文已经被分配评审，请耐心等待评审结果";
		String content_teacher = "您已被分配进行学生" + s.getStudentName() + "的论文评审工作" + 
				"请尽快完成并给出结果";

		sendSuggestion(s.getStudentNumber(), deanNumber, title_student, content_student, 0);
		sendSuggestion(innerTeacher.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
		sendSuggestion(outTeacher.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
	}

	/**
	 * 分配答辩后会话
	 * @param teacher1Id
	 * @param teacher2Id
	 * @param teacher3Id
	 * @param studentId
	 * @param secretaryId 答辩秘书id
	 */
	public void sendAfterAssignDefenseSuggestion(Integer teacher1Id, Integer teacher2Id, Integer teacher3Id, 
			Integer studentId, Integer secretaryId, String deanNumber) {
		Student s = studentService.getStudentById(studentId);
		Teacher teacher1 = teacherService.getTeacherById(teacher1Id);
		Teacher teacher2 = teacherService.getTeacherById(teacher2Id);
		Teacher teacher3 = teacherService.getTeacherById(teacher3Id);
		Teacher secretary = teacherService.getTeacherById(secretaryId);

		Validate.notNull(s);
		Validate.notNull(teacher1);
		Validate.notNull(teacher2);
		Validate.notNull(teacher3);
		Validate.notNull(secretary);

		String title_student = "论文已分配答辩";
		String title_teacher = "您已被分配参与学生" + s.getStudentName() + "的论文答辩";
		String content_student = "你的论文已经被分配答辩老师\n"
				+ "答辩老师：" + teacher1.getTeacherName() + ", " 
				+ teacher2.getTeacherName() + ", " + teacher3.getTeacherName() + "\n"
				+ "答辩秘书：" + secretary.getTeacherName();
		String content_teacher = "您已被分配参与学生" + s.getStudentName() + "的论文答辩工作";

		sendSuggestion(s.getStudentNumber(), deanNumber, title_student, content_student, 0);
		sendSuggestion(teacher1.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
		sendSuggestion(teacher2.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
		sendSuggestion(teacher3.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
		sendSuggestion(secretary.getTeacherNumber(), deanNumber, title_teacher, content_teacher, 0);
	}

	/**
	 * 发送会话
	 * @param studentNumber
	 * @param teacherNumber
	 * @param deanNumber
	 * @param title
	 * @param content_teacher
	 * @param content_student
	 */
	private void sendSuggestion(String receiverNumber, String deanNumber, 
			String title, String content, Integer paperId) {
		Integer senderId = accountService.getAccountByAccountname(deanNumber).getAccountId();
		Integer receiverId_t = accountService.getAccountByAccountname(receiverNumber).getAccountId();

		LOGGER.debug("sender id: {}", senderId);
		LOGGER.debug("teacher account id: {}", receiverId_t);

		Suggestion sugg = suggestionService.createSuggestion(title, content, senderId, "教务员", receiverId_t, paperId);
		try {
			suggestionService.sendSuggestion(sugg, null);
		} catch (Exception e) {
			LOGGER.error("发送会话失败！", e);
		}
	}

	/**
	 * 分配答辩老师时，职称为副教授以上的老师不能成为答辩秘书
	 * @param teacherList
	 * @return
	 */
	public List<Teacher> removeProfessorFromSecretaryList(List<Teacher> teacherList) {
		Iterator<Teacher> it = teacherList.iterator();
		while(it.hasNext()) {
			Teacher teacher = it.next();
			if(teacher.getTeacherJobTitle().getIndex() >= TeacherJobTitle.ASSOCIATEPROFESSOR.getIndex()) {
				it.remove();
			}
		}
		return teacherList;
	}

	/**
	 * 获取在指定职称的老师
	 * @param title
	 * @return
	 */
	public List<Teacher> getTeacherByJobTitle(TeacherJobTitle title) {
		return teacherService.getTeacherByJobTitle(title);
	}

	/**
	 * 在指定教师列表中获取所有学历为博士以上的教师
	 * @param teacherList
	 * @return
	 */
	public List<Teacher> getAllDoctor(List<Teacher> teacherList) {
		Iterator<Teacher> it = teacherList.iterator();
		if(it.hasNext()) {
			Teacher teacher = it.next();
			if(teacher.getTeacherEducation().getIndex() < TeacherEducation.DORTOR.getIndex()) {
				it.remove();
			}
		}
		return teacherList;
	}

	/**
	 * 找出答辩老师与导师重复的学生
	 * @param list
	 * @return
	 */
	public List<Student> findDefenceTeacherConflictsWithTutorList(JSONArray list) {
		List<Student> conflictList = new ArrayList<>();
		boolean defenceTeacherConflictsWithTutor = false;
		for(int i = 0; i< list.size(); i++) {
			JSONObject record = JSONObject.fromObject(list.get(i));
			Integer studentId = record.getInt("studentId");
			Integer teacher1Id = record.getInt("teacher1Id");
			Integer teacher2Id = record.getInt("teacher2Id");
			Integer teacher3Id = record.getInt("teacher3Id");
			Integer secretaryId = record.getInt("secretaryId");

			Student student = studentService.getStudentById(studentId);
			Integer tutorId = student.getTeacherId();

			defenceTeacherConflictsWithTutor = (tutorId == teacher1Id) || (tutorId == teacher2Id) || 
					(tutorId == teacher3Id) || (tutorId == secretaryId);

			if(defenceTeacherConflictsWithTutor) {
				conflictList.add(student);
			}
		}
		return conflictList;
	}

	/**
	 * 判断分配评审时有没有老师和学生的导师重复
	 * @param list
	 * @return
	 */
	public List<Student> findReviewTeacherConflictsWithTutor(JSONArray list) {
		List<Student> conflictList = new ArrayList<>();
		boolean reviewTeacherConflictsWithTutor = false;

		for(int i = 0; i< list.size(); i++) {
			JSONObject record = JSONObject.fromObject(list.get(i));
			Integer studentId = record.getInt("studentId");
			Integer innerId = record.getInt("innerId");
			//Integer outerId = record.getInt("outerId");

			Student student = studentService.getStudentById(studentId);
			Integer tutorId = student.getTeacherId();

			reviewTeacherConflictsWithTutor = (tutorId == innerId);

			if(reviewTeacherConflictsWithTutor) {
				conflictList.add(student);
			}
		}
		return conflictList;
	}

	/**
	 * 获取待分配导师列表
	 * @return
	 */
	public JSONObject getAssignList() {
		List<Student> studentList = null;
		List<Teacher> teacherList = null;
		List<JsonStudent> studentlist_j = null;
		List<JsonTeacher> teacherlist_j = null;

		String result_json = "";

		try{
			studentList = studentService.getAllStudentsWithOutTeacher();
			teacherList = teacherService.getInnerTeachers();
			result_json = Constants.SUCCESS;
		}catch(Exception e){
			LOGGER.error("exception", e);
			result_json = Constants.FAIL;
		}
		studentlist_j = jsonUtil.converToJsonStudent(studentList);
		teacherlist_j = jsonUtil.converToJsonTeacher(teacherList);

		// 前台数据返回块
		JSONArray studentlist_jsonobj = JSONArray.fromObject(studentlist_j);
		JSONArray teacherlist_jsonobj = JSONArray.fromObject(teacherlist_j);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("studentlist", studentlist_jsonobj);
		jsonobj.put("teacherlist", teacherlist_jsonobj);

		jsonobj.put("result_json", result_json);
		return jsonobj;
	}

	/**
	 * 分配导师
	 * @param postData
	 * @param actorId
	 * @return
	 */
	public JSONObject assignTutor(String postData, String actorId) {
		//获取前端导师分配数据并转换为JSONArray对象
		JSONArray assignedList = JSONArray.fromObject(postData);
		String result_json = "";
		try {
			//遍历分配数据，对每一条记录进行分配操作
			for (int i = 0; i < assignedList.size(); i++){
				JSONObject record = JSONObject.fromObject(assignedList.get(i));
				Integer studentId = record.getInt("studentId");
				Integer teacherId = record.getInt("teacherId");
				assignService.addAssignByOne(studentId, teacherId, actorId);	
				sendAssignTutorSuggestion(studentId, teacherId, actorId);
			}
			result_json = Constants.SUCCESS;
		} catch (Exception e) {
			LOGGER.error("分配导师失败！", e);
			result_json = Constants.FAIL;
		}

		//将结果以JSONObject传回前端
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		return jsonobj;
	}
	
	/**
	 * 获取已分配导师列表
	 * @param pageS
	 * @param rowsS
	 * @param sidx
	 * @param sord
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public JSONObject getTutorAssigned(String pageS, String rowsS, String sidx, String sord) {
		int page = (pageS == null) ? 0 : Integer.parseInt(pageS);
		int limit = (rowsS == null) ? 1000 : Integer.parseInt(rowsS);

		HashMap<String, Object> params= new HashMap<String, Object>();
		params.put("page", page);
		params.put("limit", limit);
		params.put("sidx", sidx);
		params.put("sord", sord);

		List<Object> result = studentService.getAllStudentsWithTeacherLimit(params);
		List<Student> studentList = (List<Student>)result.get(0);
		HashMap<String,Object> limits = (HashMap<String,Object>)result.get(1);

		List<JsonStudent> studentList_j = jsonUtil.converToJsonStudent(studentList);
		for(JsonStudent s : studentList_j){		//设置指导老师姓名
			String tutorName = teacherService.getTeacherById(s.getTeacherId()).getTeacherName();
			LOGGER.debug("tutorName: {}", tutorName);
			s.setTeacherName(tutorName);
		}
		JSONArray studentList_jsonobj = JSONArray.fromObject(studentList_j);

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", studentList_jsonobj);
		jsonobj.put("page", limits.get("page"));
		jsonobj.put("total_pages", limits.get("total_pages"));
		jsonobj.put("records", limits.get("count"));
		return jsonobj;
	}
	
	/**
	 * 获取待重复率检测队列
	 * @param actorId
	 * @return
	 */
	public JSONObject getCheckList(String actorId) {
		List<JwCheckPaper> checklist = new ArrayList<JwCheckPaper>();
		List<PaperVO> paperList = new ArrayList<PaperVO>();
		
		List<Task> taskList = activitiAPIUtils.getTaskListByUserIdAndName(actorId, "Detection");
		for(Task task : taskList) {
			//由于该任务没有分配给用户，首先签收该任务
			activitiAPIUtils.claimTask(task.getId(), actorId);
		}
		
		List<Task> taskList2 = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "Detection");
		for(Task task : taskList2) {
			ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());
			PaperVO paperVO = null;
			if (processInstance != null) {
				int studentId =  (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
				Student student = studentService.getStudentById(studentId);
				Paper paper = paperService.getPaperByStudentId(studentId);
				paperVO = convertToPaperVO(student, paper);
				paperVO.setTaskId(Long.parseLong(task.getId()));

				paperList.add(paperVO);
				checklist.add(JwCheckPaper.toJwCheckPaper(paper,student,Long.parseLong(task.getId())));
			}
		}

		JSONArray jsonlist = JSONArray.fromObject(checklist);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		return jsonobj;
	}
	
	private PaperVO convertToPaperVO(Student student, Paper paper) {
		PaperVO paperVO = new PaperVO();
		paperVO.setPaperId(paper.getPaperId());
		paperVO.setPaperTitle(paper.getPaperTitle());
		paperVO.setStudentName(student.getStudentName());
		return paperVO;
	}
	
	/**
	 * 判定重复率检测结果
	 * @param paperstr
	 * @param actorId
	 * @return
	 */
	public JSONObject decideRepitition(String paperstr, String actorId) {
		JSONObject paper_json = JSONObject.fromObject(paperstr);
		Integer paperId = paper_json.getInt("paperId");	//论文ID主键
		long taskId = paper_json.getLong("taskId");	//论文任务ID
		String detection = paper_json.getString("detection");	//论文重复率决议，通过或不通过

		boolean isDetectionPassed = false;
		Paper paper = paperService.getPaperByPaperId(paperId);
		if("true".equals(detection)){
			isDetectionPassed = true;
			paper.setPaperState(PaperState.DETECTION_PASSED);
		}else{
			paper.setPaperState(PaperState.UNCOMMITED);
		}
		
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("detection", isDetectionPassed);

		String result_json = "";
		try{
			paperService.updatePaper(paper);
			activitiAPIUtils.completeTask(String.valueOf(taskId), data);
			sendAfterDetectionSuggestion(paper, actorId);
			result_json = Constants.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = Constants.FAIL;
		}
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		return jsonobj;
	}
	
	/**
	 * 获得待分配评审队列
	 * @param actorId
	 * @return
	 */
	public JSONObject getJudgeAssignList(String actorId) {
		String result_json = "";
		List<JsonStudent> studentList = new ArrayList<JsonStudent>();//待分配评审的学生list
		List<JsonTeacher> innerJsonList = new ArrayList<JsonTeacher>();//待分配评审的内审老师list
		List<JsonTeacher> outerJsonList = new ArrayList<JsonTeacher>();//待分配的外审老师list

		//获得分配评审的列表
		List<Task> taskList = activitiAPIUtils.getTaskListByUserIdAndName(actorId, "Assign Review");
		for(Task task : taskList) {
			//由于该任务没有分配给用户，首先签收该任务
			activitiAPIUtils.claimTask(task.getId(), actorId);
		}
		
		List<Task> taskList2 = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "Assign Review");
		try{
			for(Task task : taskList2) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Student student = studentService.getStudentById(studentId);
					studentList.add(new JsonStudent(student));
				}
			}
			List<Teacher> innerTeacherList = teacherService.getInnerTeachers();
			List<Teacher> outerTeacherList = teacherService.getOuterTeachers();
			for(Teacher innerTeacher : innerTeacherList){
				innerJsonList.add(new JsonTeacher(innerTeacher));
			}

			for(Teacher outerTeacher : outerTeacherList){
				outerJsonList.add(new JsonTeacher(outerTeacher));
			}
			result_json = Constants.SUCCESS;
		} catch(IllegalArgumentException ie) {
			LOGGER.error("没有“分配评审”的任务！", ie);
			result_json = Constants.FAIL;
		} catch(Exception e){
			LOGGER.error("exception!", e);
			result_json = Constants.FAIL;
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("studentlist", studentList);
		jsonobj.put("innerlist", innerJsonList);
		jsonobj.put("outerlist", outerJsonList);
		return jsonobj;
	}
	
	/**
	 * 分配评审
	 * @param liststr
	 * @param time
	 * @param actorId
	 * @return
	 */
	public JSONObject assignJudge(String liststr, String time, String actorId) {
		JSONArray list = JSONArray.fromObject(liststr);
		List<Student> conflictList = new ArrayList<>();
		String result_json = "";
		try{
			conflictList = findReviewTeacherConflictsWithTutor(list);
			LOGGER.debug("conflict list size: {}", conflictList.size());
			if(conflictList.isEmpty()) {
				for (int i = 0; i < list.size(); i++){
					JSONObject record = JSONObject.fromObject(list.get(i));
					Integer studentId = record.getInt("studentId");
					String studentNumber = record.getString("studentNumber");
					Integer innerId = record.getInt("innerId");
					Integer outerId = record.getInt("outerId");
	
					Timestamp deadline = Timestamp.valueOf(time); 
	
					List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "Assign Review");
					for(Task task : taskList) {
						ProcessInstance instance = activitiAPIUtils.getProcessInstance(task.getId());
						String num = (String) activitiAPIUtils.getVariable(instance.getId(), "student");
						if(studentNumber.equals(num)){	
							assignService.addJudgeByOne(studentId, innerId, outerId, deadline);
	
							Teacher inTeacher = teacherService.getTeacherById(innerId);
							Teacher outTeacher = teacherService.getTeacherById(outerId);
	
							Map<String, Object> reviewteachers = new HashMap<String, Object>();
							reviewteachers.put("reviewteacher1", inTeacher.getTeacherNumber());
							reviewteachers.put("reviewteacher2", outTeacher.getTeacherNumber());
							reviewteachers.put("internalReview", null);
							reviewteachers.put("externalReview", null);
							activitiAPIUtils.completeTask(task.getId(), reviewteachers);
	
							//设置论文状态
							Paper paper = paperService.getPaperByStudentId(studentId);
							paper.setPaperState(PaperState.JUDGE_READY);
							paperService.updatePaper(paper);
							//发送会话
							sendAfterAssignJudgeSuggestion(studentId, innerId, outerId, actorId, paper.getPaperId());
							break;
						}
					}
					//发送提醒邮件
					/*
					EmailService emailService=new EmailService();
					String to1=teacherService.getTeacherById(innerId).getTeacherEmail();
					String to2=teacherService.getTeacherById(outerId).getTeacherEmail();
					String subject="评审："+studentService.getStudentById(studentId).getStudentName()+"_"+paperService.getPaperByStudentId(studentId).getPaperTitle();
					String content1="尊敬的"+teacherService.getTeacherById(innerId).getTeacherName()+" 老师，您好！附件是"+studentService.getStudentById(studentId).getStudentName()+"的论文，请您评审，并在截止时间之前提交评审意见";
					String content2="尊敬的"+teacherService.getTeacherById(outerId).getTeacherName()+" 老师，您好！附件是"+studentService.getStudentById(studentId).getStudentName()+"的论文，请您评审，并在截止时间之前提交评审意见";
					List<File> attachmentfiles=new ArrayList<File>() ;
					File f=new File(paperService.getPaperByStudentId(studentId).getPaperAddress());
					attachmentfiles.add(f);
					try {
						emailService.sendMailAttach(to1, subject, content1,attachmentfiles);
						emailService.sendMailAttach(to2, subject, content2,attachmentfiles);
					} catch (MessagingException e) {
						e.printStackTrace();
					}
					 */
					result_json = Constants.SUCCESS;
				}
			}else {
				result_json = Constants.FAIL;
			}
		}catch(Exception e){
			result_json = Constants.FAIL;
			e.printStackTrace();
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("conflict_list", conflictList);
		return jsonobj;
	}
	
	/**
	 * 获取已分配评审的学生列表
	 * @return
	 */
	public JSONObject getJudgeAssigned() {
		List<JsonJudgeAssigned> jsonList = new ArrayList<JsonJudgeAssigned>();

		String result_json = "";
		try{
			List<Paper> paperList = paperService.getPapersByState(PaperState.JUDGE_READY);
			for (Paper paper : paperList){
				//获取内外审老师、学生、论文的信息
				List<Judge> judgeList = judgeService.findJudgeByPaperId(paper.getPaperId());
				Teacher t1 = teacherService.getTeacherById(judgeList.get(0).getTeacherId());
				Teacher t2 = teacherService.getTeacherById(judgeList.get(1).getTeacherId());
				Teacher inner = null;
				Teacher outer = null;
				if(t1.getTeacherClasses().equals(TeacherType.INNERTEACHER)){
					inner = t1;
					outer = t2;
				}else{
					inner = t2;
					outer = t1;
				}
				Student student = studentService.getStudentById(paper.getStudentId());
				jsonList.add(JsonJudgeAssigned.convertPaper(paper,inner,outer,student));
			}
			result_json = Constants.SUCCESS;
		}catch(Exception e){
			result_json = Constants.FAIL;
			e.printStackTrace();
		}
		JSONArray list = JSONArray.fromObject(jsonList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", list);
		jsonobj.put("result_json", result_json);
		return jsonobj;
	}
	
	/**
	 * 待答辩分配列表
	 * @param actorId
	 * @return
	 */
	public JSONObject getAssignDefenseList(String actorId) {
		String result_json = "";
		List<JsonStudent> studentList = new ArrayList<JsonStudent>();
		List<JsonTeacher> secretaryTeacherList = new ArrayList<>();
		List<JsonTeacher> chairmanTeacherList = new ArrayList<JsonTeacher>();
		List<JsonTeacher> defenceTeacherList = new ArrayList<JsonTeacher>();

		List<Task> taskList = activitiAPIUtils.getTaskListByGroupIdAndName("dean", "Assign Defense");
		for(Task task : taskList) {
			//由于该任务没有分配给用户，首先签收该任务
			activitiAPIUtils.claimTask(task.getId(), actorId);
		}
		
		List<Task> taskList2 = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "Assign Defense");
		try{
			for(Task task : taskList2) {
				activitiAPIUtils.claimTask(task.getId(), actorId);
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Student student = studentService.getStudentById(studentId);
					studentList.add(new JsonStudent(student));
				}
			}
			//三位答辩老师列表
			List<Teacher> teachers = teacherService.getInnerTeachers();
			
			//答辩主席列表（需要职称为教授）
			List<Teacher> chairmanList = getTeacherByJobTitle(TeacherJobTitle.FULLPROFESSOR);
			for (Teacher teacher : chairmanList) {
				chairmanTeacherList.add(new JsonTeacher(teacher));
			}
			//其余2位答辩老师列表（需要职称在副教授及以上，如果为副教授，学历要在博士以上）
			List<Teacher> defenceList = getAllDoctor(
					getTeacherByJobTitle(TeacherJobTitle.ASSOCIATEPROFESSOR));
			for(Teacher teacher : defenceList) {
				defenceTeacherList.add(new JsonTeacher(teacher));
			}
			defenceTeacherList.addAll(chairmanTeacherList);
			//答辩秘书列表（职称在副教授以下）
			List<Teacher> secretaryList = removeProfessorFromSecretaryList(teachers);
			for(Teacher teacher : secretaryList) {
				secretaryTeacherList.add(new JsonTeacher(teacher));
			}

			result_json = Constants.SUCCESS;
		}catch(Exception e){
			LOGGER.error("获取待分配答辩列表失败！", e);
			result_json = Constants.FAIL;
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("chairmanList", chairmanTeacherList);
		jsonobj.put("studentlist", studentList);
		jsonobj.put("teacherlist", defenceTeacherList);
		jsonobj.put("secretarylist", secretaryTeacherList);
		return jsonobj;
	}
	
	/**
	 * 提交分配答辩结果
	 * @param liststr
	 * @param actorId
	 * @return
	 */
	public JSONObject assignDefense(String liststr, String actorId, String time, String address) {
		JSONArray list = JSONArray.fromObject(liststr);
		String result_json = "";
		List<Student> conflictList = new ArrayList<>();
		try{
			conflictList = findDefenceTeacherConflictsWithTutorList(list);
			LOGGER.debug("conflict list size: {}", conflictList.size());
			if(conflictList.isEmpty()){
				for(int i = 0; i < list.size(); i++){
					JSONObject record = JSONObject.fromObject(list.get(i));
					Integer studentId = record.getInt("studentId");
					String studentNumber = record.getString("studentNumber");
					Integer teacher1Id = record.getInt("teacher1Id");
					Integer teacher2Id = record.getInt("teacher2Id");
					Integer teacher3Id = record.getInt("teacher3Id");
					Integer secretaryId = record.getInt("secretaryId");
					
					Timestamp defenceTime = Timestamp.valueOf(time); 
					
					List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "Assign Defense");
					for(Task task : taskList) {
						ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());
						//属于此流程实例的学生学号
						String num = (String) activitiAPIUtils.getVariable(processInstance.getId(), "student");
						if(studentNumber.equals(num)){	
							assignService.addDefenceByOne(studentId, teacher1Id, teacher2Id, teacher3Id, 
									secretaryId, address, defenceTime);
							
							//添加用户
							Teacher teacher1 = teacherService.getTeacherById(teacher1Id);
							Teacher teacher2 = teacherService.getTeacherById(teacher2Id);
							Teacher teacher3 = teacherService.getTeacherById(teacher3Id);
							Teacher secretary = teacherService.getTeacherById(secretaryId);
	
							List<String> teachers = new ArrayList<String>();
							teachers.add(teacher1.getTeacherNumber());
							teachers.add(teacher2.getTeacherNumber());
							teachers.add(teacher3.getTeacherNumber());
	
							Map<String, Object> defenceteachers = new HashMap<String, Object>();
	
							defenceteachers.put("defensesecretary",secretary.getTeacherNumber());
							defenceteachers.put("reprieveApproved", 0);
							defenceteachers.put("teachers", teachers);
	
							activitiAPIUtils.completeTask(task.getId(), defenceteachers);
						}
					}
					
					Paper paper = paperService.getPaperByStudentId(studentId);
					paper.setPaperState(PaperState.DEFENSE_READY);
					paperService.updatePaper(paper);
					//发送提醒邮件；
					/*
					EmailService emailService=new EmailService();
					String to1=teacherService.getTeacherById(teacher1Id).getTeacherEmail();
					String to2=teacherService.getTeacherById(teacher2Id).getTeacherEmail();
					String to3=teacherService.getTeacherById(teacher3Id).getTeacherEmail();
					String to4=teacherService.getTeacherById(secretaryId).getTeacherEmail();
					String subject="答辩："+studentService.getStudentById(studentId).getStudentName()+"_"+paperService.getPaperByStudentId(studentId).getPaperTitle();
					String content1="<p>尊敬的"+teacherService.getTeacherById(teacher1Id).getTeacherName()+" 老师，您好！附件是"+studentService.getStudentById(studentId).getStudentName()+"的论文，请您参加该同学的论文答辩，答辩时间为"+defenceTime+"，地点为"+address+"</p>"
							+"<p><a href='http://localhost:8080/papermanagement'>论文管理系统</a></p>";
					String content2="<p>尊敬的"+teacherService.getTeacherById(teacher2Id).getTeacherName()+" 老师，您好！附件是"+studentService.getStudentById(studentId).getStudentName()+"的论文，请您参加该同学的论文答辩，答辩时间为"+defenceTime+"，地点为"+address+"</p>"
							+"<p><a href='http://localhost:8080/papermanagement'>论文管理系统</a></p>";
					String content3="<p>尊敬的"+teacherService.getTeacherById(teacher3Id).getTeacherName()+" 老师，您好！附件是"+studentService.getStudentById(studentId).getStudentName()+"的论文，请您参加该同学的论文答辩，答辩时间为"+defenceTime+"，地点为"+address+"</p>"
							+"<p><a href='http://localhost:8080/papermanagement'>论文管理系统</a></p>";
					String content4="<p>尊敬的"+teacherService.getTeacherById(secretaryId).getTeacherName()+" 老师，您好！附件是"+studentService.getStudentById(studentId).getStudentName()+"的论文，请您参加该同学的论文答辩，答辩时间为"+defenceTime+"，地点为"+address+"</p>"
							+"<p><a href='http://localhost:8080/papermanagement'>论文管理系统</a></p>";
	
					List<File> attachmentfiles=new ArrayList<File>() ;
					File f=new File(paperService.getPaperByStudentId(studentId).getPaperAddress());
					attachmentfiles.add(f);
	
	
					try{
						emailService.sendMailAttach(to1, subject, content1,attachmentfiles);
						emailService.sendMailAttach(to2, subject, content2,attachmentfiles);
						emailService.sendMailAttach(to3, subject, content3,attachmentfiles);
						emailService.sendMailAttach(to4, subject, content4,attachmentfiles);
					}catch(MessagingException e){
	
					}
					 */
					result_json = Constants.SUCCESS;
				}
			} else {
				result_json = Constants.FAIL;
			}
		}catch(Exception e){
			result_json = Constants.FAIL;
			LOGGER.error("exception!", e);
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("conflict_list", conflictList);
		return jsonobj;
	}
	
	/**
	 * 获取已分配答辩的学生列表
	 * @return
	 */
	public JSONObject getDefenseAssigned() {
		List<JsonDefenseAssigned> jsonList = new ArrayList<JsonDefenseAssigned>();

		String result_json = "";
		try{
			List<Paper> paperList = paperService.getPapersByState(PaperState.DEFENSE_READY);
			for (Paper paper : paperList){
				LOGGER.debug("title: {}", paper.getPaperTitle());
				List<Defence> defenceList = defenceService.findDefenceByPaperId(paper.getPaperId());
				Teacher[] teachers = new Teacher[4];
				for(Defence d : defenceList){
					int index = d.getTeacherType() - 1;
					teachers[index] = teacherService.getTeacherById(d.getTeacherId());
				}
				Student student = studentService.getStudentById(paper.getStudentId());
				jsonList.add(new JsonDefenseAssigned(paper, teachers[0],teachers[1],teachers[2],teachers[3], student));
			}
			result_json = Constants.SUCCESS;
		}catch(Exception e){
			result_json = Constants.FAIL;
			e.printStackTrace();
		}
		JSONArray list = JSONArray.fromObject(jsonList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", list);
		jsonobj.put("result_json", result_json);
		return jsonobj;
	}
	
	/**
	 * 答辩后定稿列表
	 * @param actorId
	 * @return
	 */
	public JSONObject getAfterDefenceList(String actorId) {
		String result_json = "";
		List<FinalizedDefenseTask> list = new ArrayList<FinalizedDefenseTask>();

		List<Task> taskList = activitiAPIUtils.getTaskListByGroupIdAndName("dean", "Print Papers");
		for(Task task : taskList) {
			//由于该任务没有分配给用户，首先签收该任务
			activitiAPIUtils.claimTask(task.getId(), actorId);
		}
		
		List<Task> taskList2 = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "Print Papers");
		try{
			for(Task task : taskList2) {
				ProcessInstance instance = activitiAPIUtils.getProcessInstance(task.getId());
				if(instance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(instance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					Teacher teacher = teacherService.getTeacherById(student.getTeacherId());
					list.add(FinalizedDefenseTask.toFinalizedDefenseTask(student, paper, teacher, Long.parseLong(task.getId())));
				}
			}
			result_json = Constants.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = Constants.FAIL;
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", list);
		jsonobj.put("result_json", result_json);
		LOGGER.debug("jsonobj: {}", jsonobj);
		return jsonobj;
	}
	
	/**
	 * 导入分配评审excel
	 * @param request
	 * @param response
	 * @param actorId
	 * @return
	 */
	@Transactional(rollbackFor=Exception.class)
	public JSONObject importAssignExcel(HttpServletRequest request, 
			HttpServletResponse response, String actorId) {
		String result = "";
		try {
			ExcelUtil excel=new ExcelUtil();
			List<ArrayList<String>> dataLst = excel.importExcel(
					request, response, "file");
			int total=excel.getTotalRows();

			Iterator<ArrayList<String>> it = dataLst.iterator();
			it.next();
			float i=(float) 0.0;
			while (it.hasNext()) {
				i++;
				ArrayList<String> innerLst = it.next();
				request.getSession().setAttribute("value", (int)((i/total)*100));
				request.getSession().setAttribute("name", innerLst.get(1));
				result = innerLst.get(0)+"不存在";
				Student student = studentService.getStudentByStudentNumber(innerLst.get(0));
				Teacher realTeacher = teacherService.getTeacherByTeacherName(innerLst.get(2));
				if (!innerLst.get(3).equals("")) {
					Teacher nominalTeacher = teacherService
							.getTeacherByTeacherName(innerLst.get(3));
					assignService.addAssignByOne(student.getStudentId(),
							realTeacher.getTeacherId(),
							nominalTeacher.getTeacherId(), actorId);
				} else
					assignService.addAssignByOne(student.getStudentId(),
							realTeacher.getTeacherId(), actorId);
				result = "导入成功";
			}

		}catch(Exception e) {
			result =result+"请输入正确的文件";
			e.printStackTrace();
		}
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result", result);
		return jsonobj;
	}
	
	/**
	 * 导入评审费用
	 * @param request
	 * @param response
	 * @return
	 */
	@Transactional(rollbackFor=Exception.class)
	public JSONObject importFeeOfJudgeExcel(HttpServletRequest request,
			HttpServletResponse response) {
		String result="";
		try{
			List<ArrayList<String>> dataLst=new ExcelUtil().importExcel(request, response, "file");
			Iterator<ArrayList<String>> it=dataLst.iterator();
			it.next();
			while(it.hasNext())
			{ 
				ArrayList<String> innerLst=it.next();
				Fee fee=new Fee();
				String studentNumber=innerLst.get(0);
				int studentID=studentService.getStudentByStudentNumber(studentNumber).getStudentId();
				fee.setStudentId(studentID);
				int teacherID=teacherService.getTeacherByTeacherName(innerLst.get(2)).getTeacherId();
				fee.setTeacherId(teacherID);
				fee.setAmount(Float.parseFloat(innerLst.get(3)));
				fee.setGrantType(Constants.GRANT_TYPE.indexOf(innerLst.get(4)));
				fee.setFeeType(Constants.FEE_TYPE.indexOf("评审费"));

				fee.setGrantTime(Timestamp.valueOf(innerLst.get(5)));
				feeService.addFee(fee);
				/*List<Task> taskList = activitiAPIUtils.getTaskListByGroupIdAndName("dean", "Assign Review");
				for(Task task : taskList) {
					ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());
					//属于此流程实例的学生学号
					String num = (String) activitiAPIUtils.getVariable(processInstance.getId(), "student");
					if(studentNumber.equals(num)){	
						assignService.addJudgeByOne(studentID, teacherID, 0, null);
						activitiAPIUtils.completeTask(task.getId());
					}else{
						result="学生" + studentNumber + "不能参加评审";
					}
				}*/
			}
			result="导入成功";
		}catch(Exception e) {
			if(result != null)  result="请输入正确的文件,格式依照本页教师列表";
			e.printStackTrace();
		}	   

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result", result);
		return jsonobj;
	}
	
	/**
	 * 导出三个一
	 * @param liststr
	 * @param response
	 */
	@Transactional(rollbackFor=Exception.class)
	public void exportThreeExcel(String liststr, HttpServletResponse response) {
		List<Student> studentlst = new ArrayList<Student>();
		JSONArray list = JSONArray.fromObject(liststr);
		System.out.println(list);
		for (int i = 0; i < list.size(); i++){
			JSONObject record = JSONObject.fromObject(list.get(i));
			String studentNumber = record.getString("studentNumber");
			studentlst.add(studentService.getStudentByStudentNumber(studentNumber)) ;
		}

		HSSFWorkbook wb =reportService.exportThreeAndOne(studentlst); 
		response.setContentType("application/vnd.ms-excel;charset=UTF-8");  
		response.setHeader("Content-disposition", "attachment;filename=studentScore.xls");  

		OutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			wb.write(ouputStream);  
			ouputStream.flush();  
			ouputStream.close();  
		}catch(IOException e) {
			e.printStackTrace();
		}  
	}
}
