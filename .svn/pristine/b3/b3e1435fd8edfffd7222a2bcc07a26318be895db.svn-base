package nju.software.controller.teacher;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import nju.software.entity.Account;
import nju.software.entity.Student;
import nju.software.entity.Teacher;
import nju.software.jsonmodel.JsonStudent;
import nju.software.jsonmodel.JsonTeacher;
import nju.software.service.AccountService;
import nju.software.service.StudentService;
import nju.software.service.TeacherService;
import nju.software.util.JSONUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * 教师信息控制类
 * @author billjyc
 *
 */
@Controller
public class TeacherInfoController {
	private static Logger logger = LoggerFactory.getLogger(TeacherInfoController.class);
	private final static String SUCCESS = "success";
	private final static String FAIL = "fail";
	public static final int MAX_RESULT = 1000;
	
	@Autowired
	private JSONUtil jsonUtil;
	@Autowired
	private StudentService studentService;
	@Autowired
	private TeacherService teacherService;
	@Autowired
	private AccountService accountService;
	
	/**
	 * 获得教师负责的学生列表
	 * @author wsd
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/tutor/studentlist.do")
	public void studentList(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		String pageS = request.getParameter("page");
		String rowsS = request.getParameter("rows");
		String sidx = request.getParameter("sidx");
		String sord = request.getParameter("sord");

		int teacherId = (Integer) request.getSession().getAttribute("teacherId");
		int page=0;
		int rows= MAX_RESULT;

		page = (pageS == null) ? 0 : Integer.parseInt(pageS);
		rows = (rowsS == null) ? MAX_RESULT : Integer.parseInt(rowsS);

		HashMap<String, Object> params=new HashMap<String, Object>();
		params.put("page", page);
		params.put("limit", rows);
		params.put("sidx", sidx);
		params.put("sord", sord);

		List<Student> studentList = null;
		List<JsonStudent> jsonStudentList = null;
		HashMap<String,Object> limits = null;

		String result_json = "";
		try{
			List<Object> result= studentService.getStudentsByTeacherIdLimit(teacherId, params);
			studentList = (List<Student>)result.get(0);	//查询的学生列表
			limits = (HashMap<String, Object>) (result.get(1));	//分页信息

			jsonStudentList = new ArrayList<JsonStudent>();
			for(Student student: studentList){
				int accountId = accountService.getAccountByAccountname(student.getStudentNumber()).getAccountId();
				JsonStudent jsonStudent= new JsonStudent(student);
				jsonStudent.setAccountId(accountId);
				jsonStudentList.add(jsonStudent);
			}

			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONArray jsonlist = JSONArray.fromObject(jsonStudentList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("page", limits.get("page"));
		jsonobj.put("total_pages", limits.get("total_pages"));
		jsonobj.put("records", limits.get("count"));
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 查看老师信息
	 */
	@RequestMapping(value = "/tutor/teacherinfo.do")
	public void teacherInfo(HttpServletRequest request, HttpServletResponse response,ModelMap model) {
		int teacherId = (Integer) request.getSession().getAttribute("teacherId");
		Teacher teacher = null;
		String result_json = "";
		try {
			teacher = teacherService.getTeacherById(teacherId);
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		// 转换为jsonstudent
		JsonTeacher jsonteacher = new JsonTeacher(teacher);

		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("teacher", jsonteacher);
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 更新教师信息
	 * @param request
	 * @param response
	 * @param model
	 * @param email
	 * @param phone
	 */
	@RequestMapping(value = "/tutor/updateTeacherInfo.do")
	@ResponseBody
	public void updateTeacherInfo(HttpServletRequest request,
			HttpServletResponse response, ModelMap model, 
			@RequestParam("email") String email, @RequestParam("phone") String phone) {
		int teacherId = (Integer) request.getSession()
				.getAttribute("teacherId");

		logger.debug("email: {}, phone: {}", email, phone);
		Teacher teacher = null;
		String result_json = "";
		try {
			teacher = teacherService.getTeacherById(teacherId);
			teacher.setTeacherEmail(email);
			teacher.setTeacherPhone(phone);
			teacherService.updateTeacherInfo(teacher);
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}

		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}	

	/**
	 * 修改密码
	 * @param request
	 * @param response
	 * @param model
	 * @param oPassword 旧密码
	 * @param nPassword 新密码
	 */
	@RequestMapping(value = "/tutor/changePassword.do")
	@ResponseBody
	public void changePassword(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			@RequestParam("oPassword") String oPassword, 
			@RequestParam("nPassword") String nPassword){

		int accountId = (Integer) request.getSession()
				.getAttribute("accountId");

		logger.debug("accountId: {}, oPassword: {}, nPassword: {}", accountId, oPassword, nPassword);
		Account account = null;
		String result_json = "";
		try {
			account = accountService.getAccountByAccountId(accountId);

			if(account.getAccountPassword().equals(oPassword)){
				account.setAccountPassword(nPassword);
				accountService.updateAccount(account);
				result_json = SUCCESS;	
			}
			else{
				result_json = FAIL;
			}
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}
}
