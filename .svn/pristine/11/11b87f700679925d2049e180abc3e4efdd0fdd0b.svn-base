package nju.software.controller.teacher;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import nju.software.entity.Defence;
import nju.software.entity.Paper;
import nju.software.entity.Student;
import nju.software.jsonmodel.DefenseTask;
import nju.software.manager.teacher.TeacherDefenseManager;
import nju.software.service.DefenceService;
import nju.software.service.PaperService;
import nju.software.service.StudentService;
import nju.software.util.ActivitiAPIUtils;
import nju.software.util.Constants;
import nju.software.util.FileOperateUtil;
import nju.software.util.JSONUtil;
import nju.software.util.enums.PaperState;

import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * 教师答辩工作控制类
 * @author billjyc
 *
 */
@Controller
public class TeacherDefenseController {
	@Autowired
	private JSONUtil jsonUtil;
	@Autowired
	private ActivitiAPIUtils activitiAPIUtils;
	
	private static Logger logger = LoggerFactory.getLogger(TeacherDefenseController.class);
	private final static String SUCCESS = "success";
	private final static String FAIL = "fail";
	
	@Autowired
	private PaperService paperService;
	@Autowired
	private DefenceService defenceService;
	@Autowired
	private StudentService studentService;
	@Autowired
	private TeacherDefenseManager teacherDefenseManager;
	
	/**
	 * 答辩待决议列表（答辩秘书）
	 * @author Jason
	 */
	@RequestMapping(value="/tutor/defenselist.do")
	public void getDefenseList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<DefenseTask> list = new ArrayList<DefenseTask>();

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Defense Decision");
			for(Task task : taskList) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					list.add(DefenseTask.toDefenseTask(student, paper, Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 答辩决议（文秘）
	 * @author Jason
	 */
	@RequestMapping(value = "/tutor/defensedecision.do")
	public void defenseDecision(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("paperid") String paperIdS, @RequestParam("taskid") String taskIdS, 
			@RequestParam("result") String result, @RequestParam("defense_content") String defenseContent, 
			@RequestParam("three_one") String threeOne) {
		logger.info("defense decision");
		Integer paperId = Integer.parseInt(paperIdS);
		logger.debug("paper ID: {}", paperId);
		Long.parseLong(taskIdS);
		String actorNo = (String) request.getSession().getAttribute("actorNo");

		String result_json = "";
		try {
			Defence defence = defenceService.findDefenceByPaperIdandTeacherId(paperId, (Integer)request.getSession().getAttribute("teacherId"));
			if(defence != null){
				defence.setDefenceContent(defenseContent);
				defence.setDefenceResult(result);
				defence.setThreeOne(threeOne);
				defence.setDefenceCount(defence.getDefenceCount()+1);
				// 上传文件
				int studentId = paperService.getPaperByPaperId(paperId).getStudentId();
				String studentNumber = studentService.getStudentById(studentId).getStudentNumber();
				File save = FileOperateUtil.Upload(request,
						FileOperateUtil.getAbsoluteFileDir(studentNumber), "defense_affix"+actorNo, "submit_file");
				if (save == null) {
					result_json = FAIL;
					JSONObject jsonobj = new JSONObject();
					jsonobj.put("result_json", result_json);
					jsonUtil.sendJson(response, jsonobj);
				}
				defence.setDefenceAffix(FileOperateUtil.getRelativeFilePath(save.getAbsolutePath()));
				defenceService.updateDefence(defence);
				
				Paper paper = paperService.getPaperByPaperId(paperId);
				if(paper != null){
					if(result.equals("passed")){
						paper.setPaperState(PaperState.DEFENSE_PASSED);
					}else if(result.equals("reprieved")){
						paper.setPaperState(PaperState.DEFENSE_REPRIEVED);
					}else{
						paper.setPaperState(PaperState.UNCOMMITED);	// 不确定，流程图指向 “未提交”状态，需求是“完成初稿”
					}

					Map<String, Object> data = new HashMap<String, Object>();
					data.put("defense", result);

					paperService.updatePaper(paper);
					activitiAPIUtils.completeTask(taskIdS, data);
					teacherDefenseManager.sendDefenseSuggestion(actorNo, paper, save);
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 暂缓评审待决议列表（答辩评委）
	 */
	@RequestMapping(value="/tutor/reprievedecisionlist.do")
	public void getReprieveDecisionList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<DefenseTask> list = new ArrayList<DefenseTask>();

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Reprieve Decision");
			for(Task task : taskList) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					list.add(DefenseTask.toDefenseTask(student, paper, Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 暂缓评审决议（答辩评委）
	 * @author Jason
	 */
	@RequestMapping(value = "/tutor/reprievedecision.do")
	public void reprieveDecision(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("paperid") String paperidS, @RequestParam("taskid") String taskIdS, 
			@RequestParam("result") String resultS, @RequestParam("reprieve_content") String reprieveContent) {
		Integer paperId = Integer.parseInt(paperidS);
		Long.parseLong(taskIdS);
		boolean result = (resultS.equals("pass")) ? true: false;
		String actorNo = (String) request.getSession().getAttribute("actorNo");
		String result_json = "";
		try {
			Defence defence = defenceService.findDefenceByPaperIdandTeacherId(paperId, (Integer)request.getSession().getAttribute("teacherId"));
			if(defence!=null){
				defence.setDefenceContent(reprieveContent);
				defence.setDefenceResult(request.getParameter("result"));
				defence.getTeacherType();
				Map<String, Object> data = new HashMap<String, Object>();
				logger.debug("reprieve", result);
				data.put("reprieve", result);
				// 上传文件
				int studentId = paperService.getPaperByPaperId(paperId).getStudentId();
				String studentNumber = studentService.getStudentById(studentId).getStudentNumber();
				File save = FileOperateUtil.Upload(request,
						FileOperateUtil.getAbsoluteFileDir(studentNumber), "reprieve_affix"+actorNo, "submit_file");
				if (save == null) {
					result_json = FAIL;
					JSONObject jsonobj = new JSONObject();
					jsonobj.put("result_json", result_json);
					jsonUtil.sendJson(response, jsonobj);
				}
				defence.setDefenceAffix(FileOperateUtil.getRelativeFilePath(save.getAbsolutePath()));
				defenceService.updateDefence(defence);
				
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(taskIdS);
				activitiAPIUtils.completeTask(taskIdS, data);
				
				Long reprieveApproved = (Long) activitiAPIUtils.getVariable(processInstance.getId(), "reprieveApproved");
				List<String> teachers = (List<String>) activitiAPIUtils.getVariable(processInstance.getId(),"teachers");
				logger.debug("student id: {}", studentId);
				Paper paper = paperService.getPaperByStudentId(studentId);
				if(reprieveApproved == teachers.size()) {
					paper.setPaperState(PaperState.DEFENSE_PASSED);
					paperService.updatePaper(paper);
				}
				teacherDefenseManager.sendReprieveDecisionSuggestion(result, paperId, actorNo, save);
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}
}
