package nju.software.controller;

import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;
import nju.software.service.MessageService;
import nju.software.web.vo.Msg;

import org.atmosphere.cpr.AtmosphereResource;
import org.atmosphere.cpr.AtmosphereResourceEvent;
import org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter;
import org.atmosphere.cpr.Broadcaster;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;


/**
 * 消息推送控制类
 * @author Cancy
 *
 */
@Controller
public class MessageController {
	@Autowired
	private MessageService messageService;
	
	
	private void suspend(final AtmosphereResource resource) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        resource.addEventListener(new AtmosphereResourceEventListenerAdapter() {
            @Override
            public void onSuspend(AtmosphereResourceEvent event) {
                countDownLatch.countDown();
                resource.removeEventListener(this);
            }
        });
        resource.suspend();
        try {
            countDownLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
	
	
	@RequestMapping(value="getMsg.do",method=RequestMethod.POST)
	@ResponseBody
	public void getMsgAsync(AtmosphereResource event,final HttpServletRequest request, final HttpServletResponse response){
		this.suspend(event);
        final Broadcaster bc = event.getBroadcaster();         
        bc.scheduleFixedBroadcast(new Callable<String>() {
            
            //@Override
            public String call() throws Exception {
                int teacherId=(Integer) ((request.getSession().getAttribute("teacherId")!=null)?(request.getSession().getAttribute("teacherId")):0); 
                int accountId=(Integer) ((request.getSession().getAttribute("accountId")!=null)?(request.getSession().getAttribute("accountId")):0);
                Msg msg=new Msg();
                if(teacherId!=0)
                   msg=messageService.getMsg(teacherId,accountId);
//            	System.out.println(teacherId);
//            	System.out.println(JSONObject.fromObject(msg).toString());
                 return JSONObject.fromObject(msg).toString();
                 
            }

        }, 10, TimeUnit.SECONDS);
        
	}
	
}
