package nju.software.controller.student;

import java.io.File;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;
import nju.software.entity.Accessory;
import nju.software.entity.Paper;
import nju.software.entity.Proposal;
import nju.software.entity.Student;
import nju.software.entity.Suggestion;
import nju.software.entity.Teacher;
import nju.software.manager.student.StudentProposalManager;
import nju.software.service.AccountService;
import nju.software.service.PaperService;
import nju.software.service.ProposalService;
import nju.software.service.StudentService;
import nju.software.service.SuggestionService;
import nju.software.service.TeacherService;
import nju.software.util.ActivitiAPIUtils;
import nju.software.util.Constants;
import nju.software.util.FileOperateUtil;
import nju.software.util.JSONUtil;
import nju.software.util.enums.PaperState;

import org.activiti.engine.task.Task;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * 学生开题报告控制类
 * @author billjyc
 *
 */
@Controller
public class StudentProposalController {
	
	private static Logger logger = LoggerFactory.getLogger(StudentProposalController.class);
	private final static String SUCCESS = "success";
	private final static String FAIL = "fail";
	
	@Autowired
	private JSONUtil jsonUtil;
	@Autowired
	private ProposalService proposalService;
	@Autowired
	private ActivitiAPIUtils activitiAPIUtils;
	@Autowired
	private StudentService studentService;
	@Autowired
	private TeacherService teacherService;
	@Autowired
	private AccountService accountService;
	@Autowired
	private SuggestionService suggestionService;
	@Autowired
	private PaperService paperService;
	@Autowired
	private StudentProposalManager studentProposalManager;
	
	/**
	 * 提交开题报告
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value = "/student/submitproposal.do")
	@ResponseBody
	public void submitProposal(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		HttpSession session = request.getSession();
		String result_json = "";

		int studentId = (Integer) session.getAttribute("studentId");
		String actorId = (String) session.getAttribute("actorId");
		logger.debug("student id: {}, actor id: {}", studentId, actorId);

		Proposal proposal = null;

		FileOperateUtil.getMultipartFile(request, FileOperateUtil.getAbsoluteFileDir(actorId), "Proposal",
				"submit_proposal_file");

		File proposalfile = FileOperateUtil
				.Upload(request, FileOperateUtil.getAbsoluteFileDir(actorId), "Proposal",
						"submit_proposal_file");
		if (proposalfile == null) {
			result_json = FAIL;
			JSONObject jsonobj = new JSONObject();
			jsonobj.put("result_json", result_json);
			jsonUtil.sendJson(response, jsonobj);
		}

		//先在数据库里查询之前该学生又没有提交开题报告
		proposal = proposalService.getProposalByStudentId(studentId);
		//如果为空，证明之前没有提交过开题报告，否则，说明之前的开题报告被打回过
		if(proposal == null){
			proposal = new Proposal();
			proposal.setStudentId(studentId);
			proposal.setProposalAddress(FileOperateUtil.getRelativeFilePath(proposalfile
					.getAbsolutePath()));
		} 

		proposal.setStatus(Constants.PROPOSAL_UNCHECKED);
		try {
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "submit proposal");
			for(Task task : taskList) {
				proposalService.saveOrUpdateProposal(proposal);
				activitiAPIUtils.completeTask(task.getId());
			}
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		
		Paper paper = paperService.getPaperByStudentId(studentId);
		paper.setPaperState(PaperState.PROPOSAL_UNDER_REVIEW);
		paperService.updatePaper(paper);
		
		//学生向导师发起新的会话
		studentProposalManager.sendSuggestion(studentId, proposalfile);

		//向导师发送提醒邮件；
		//studentProposalManager.sendMailToTeacher(studentId);

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 更新开题报告
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value = "/student/updateproposal.do")
	@ResponseBody
	public void updateProposal(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		HttpSession session = request.getSession();
		String result_json = SUCCESS;

		int studentId = (Integer) session.getAttribute("studentId");
		String actorId = (String) session.getAttribute("actorId");

		File proposalfile = FileOperateUtil
				.Upload(request, FileOperateUtil.getAbsoluteFileDir(actorId), "Proposal",
						"update_proposal_file");
		if (proposalfile == null) {
			result_json = FAIL;
			JSONObject jsonobj = new JSONObject();
			jsonobj.put("result_json", result_json);
			jsonUtil.sendJson(response, jsonobj);
		}

		Proposal proposal = proposalService.getProposalByStudentId(studentId);
		proposal.setProposalAddress(FileOperateUtil.getRelativeFilePath(proposalfile
				.getAbsolutePath()));
		proposalService.updateProposal(proposal);

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 下载开题报告
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value = "/student/downloadproposal.do", method = RequestMethod.POST)
	public void downloadproposal(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		logger.info("download proposal");
		HttpSession session = request.getSession();
		int studentId = (Integer) session.getAttribute("studentId");

		Proposal proposal = proposalService.getProposalByStudentId(studentId);
		String absolutepath = FileOperateUtil.getAbsoluteFilePath(proposal.getProposalAddress());
		logger.debug("absolute path: {}", absolutepath);

		FileOperateUtil.Download(response, absolutepath);

		String result_json = "";
		try {
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}
}
