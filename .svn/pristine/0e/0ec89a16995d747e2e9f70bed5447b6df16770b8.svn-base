package nju.software.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import nju.software.entity.Course;
import nju.software.entity.Paper;
import nju.software.entity.Student;
import nju.software.entity.StudentCourseInfo;
import nju.software.jsonmodel.JsonCourse;
import nju.software.jsonmodel.JsonPaper;
import nju.software.jsonmodel.JsonStudent;
import nju.software.jsonmodel.JsonStudentCourseInfo;
import nju.software.service.CourseService;
import nju.software.service.PaperService;
import nju.software.service.StudentCourseInfoService;
import nju.software.service.StudentService;
import nju.software.util.JSONUtil;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class HeadTeacherController{
	@Autowired
	private StudentService studentService;
	@Autowired
	private PaperService paperService;
	@Autowired
	private CourseService courseService;
	@Autowired
	private StudentCourseInfoService studentCourseInfoService;
	@Autowired
	private JSONUtil jsonUtil;

	private final static String FAIL = "fail";


	private static Logger logger = Logger.getLogger(HeadTeacherController.class);




	/**
	 * 获取审核通过的成绩列表，分页
	 * @author cj
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/headTeacher/checkedTranscript.do")
	public void getCheckedTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String pageS = request.getParameter("page");
		String rowsS = request.getParameter("rows");
		String sidx = request.getParameter("sidx");
		String sord = request.getParameter("sord");
		int page = (pageS == null) ? 0 : Integer.parseInt(pageS);
		int limit = (rowsS == null) ? 1000 : Integer.parseInt(rowsS);
		HashMap<String,Object> params=new HashMap<String,Object>();
		params.put("page", page);
		params.put("limit", limit);
		params.put("sidx", sidx);
		params.put("sord", sord);
		List<Object> result = studentCourseInfoService.getCheckedTranscript(params);
		List<StudentCourseInfo> studentCourseList = (List<StudentCourseInfo>)result.get(0);
		HashMap<String,Object> limits = (HashMap<String,Object>)result.get(1);
		List<JsonStudentCourseInfo> courseList_j = jsonUtil.converToJsonStudentCourseInfo(studentCourseList);
		JSONArray courseList_jsonobj = JSONArray.fromObject(courseList_j);	
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", courseList_jsonobj);
		jsonobj.put("page", limits.get("page"));
		jsonobj.put("total_pages", limits.get("total_pages"));
		jsonobj.put("records", limits.get("count"));
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得学生的论文列表
	 * @author cj
	 */
	@RequestMapping(value = "/headTeacher/getallthesi.do")
	@ResponseBody
	public void getAllList(HttpServletRequest request,HttpServletResponse response,
			ModelMap model){
		List<Student> studentList = studentService. getAllStudentsWithOutTeacher();
		String result_json = "";
		ArrayList<JsonPaper> paperList = new ArrayList<JsonPaper>();
		try{
			if(studentList!=null){
				for(int i=0;i<studentList.size();i++){
					int studentId = studentList.get(i).getStudentId();
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(studentId);
					if(paper!=null){
						JsonPaper jsonPaper = JsonPaper.paper2JsonPaper(paper,student);
						paperList.add(jsonPaper);
					}
				}
			}
			result_json = "success";
		}catch(Exception e){
			logger.error("get all thesis list failed: ",e);
			result_json = FAIL;
		}
		JSONArray jsonlist = JSONArray.fromObject(paperList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 得到搜索条件
	 * @param col:表中属性， Oper：操作符      val：搜索 值
	 */
	public String getSearch(String col,String oper,String val){

		HashMap<String, String> map=new HashMap<String, String>();
		map.put("eq","=");
		map.put("ne","<>");
		map.put("lt", "<");
		map.put("le", "<=");
		map.put("gt",">");
		map.put("ge", ">=");
		map.put("bw", "LIKE");
		map.put("bn", "NOT LIKE");
		map.put("in", "LIKE");
		map.put("ni", "NOT LIKE");
		map.put("ew", "LIKE");
		map.put("en", "NOT LIKE");
		map.put("cn", "LIKE");
		map.put("nc", "NOT LIKE");
		if(col.equals("score")){
			if(val.equals("优")){
				val=String.valueOf(1);
			}
			if(val.equals("良")){
				val=String.valueOf(2);
			}
			if(val.equals("中")){
				val=String.valueOf(3);
			}
			if(val.equals("及格")){
				val=String.valueOf(4);
			}
		}
		if(col.equals("state")){
			if(val.equals("已通过")){
				val=String.valueOf(1);
			}
			if(val.equals("未审核")){
				val=String.valueOf(0);
			}
			if(val.equals("驳回")){
				val=String.valueOf(2);
			}

		}
		if(oper.equals("bw") || oper.equals("bn") ) val =val+ "%";
		if(oper.equals("ew") || oper.equals("en") ) val = "%"+val;
		if(oper.equals("cn") || oper.equals("nc")  || oper.equals("in") || oper.equals("ni")) val = "%"+val+"%";
		return "WHERE "+ col+" "+ map.get(oper)+" '"+ val+"'" ;

	}
}