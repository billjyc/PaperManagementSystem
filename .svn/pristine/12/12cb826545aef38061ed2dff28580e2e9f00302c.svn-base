package nju.software.controller.student;

import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;
import nju.software.entity.Accessory;
import nju.software.entity.InterimReport;
import nju.software.entity.Paper;
import nju.software.entity.Proposal;
import nju.software.entity.Student;
import nju.software.entity.Suggestion;
import nju.software.entity.Teacher;
import nju.software.entity.enums.PaperState;
import nju.software.jsonmodel.JsonPaper;
import nju.software.manager.student.StudentPaperManager;
import nju.software.service.AccountService;
import nju.software.service.InterimReportService;
import nju.software.service.PaperService;
import nju.software.service.ProposalService;
import nju.software.service.StudentService;
import nju.software.service.SuggestionService;
import nju.software.service.TeacherService;
import nju.software.util.ActivitiAPIUtils;
import nju.software.util.Constants;
import nju.software.util.FileOperateUtil;
import nju.software.util.JSONUtil;

import org.activiti.engine.task.Task;
import org.apache.commons.lang3.Validate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

/**
 * 学生论文控制类
 * @author jiayicong
 * @date 2015-3-21
 *
 */
@Controller
public class StudentPaperController {
	private static Logger logger = LoggerFactory.getLogger(StudentPaperController.class);
	private final static String SUCCESS = "success";
	private final static String FAIL = "fail";
	
	@Autowired
	private JSONUtil jsonUtil;
	@Autowired
	private ActivitiAPIUtils activitiAPIUtils;
	@Autowired
	private StudentService studentService;
	@Autowired
	private TeacherService teacherService;
	@Autowired
	private AccountService accountService;
	@Autowired
	private SuggestionService suggestionService;
	@Autowired
	private PaperService paperService;
	@Autowired
	private ProposalService proposalService;
	@Autowired
	private InterimReportService interimReportService;
	@Autowired
	private StudentPaperManager studentPaperManager;
	
	/**
	 * 获得学生论文状态
	 * 
	 * @author wsd
	 * @param studentId
	 *            学生存放在session中的主键
	 * @param paperstatus
	 *            学生论文状态
	 * @param result_json
	 *            执行方法体成功与否的判断信息，用于返回前台展示用户提示信息
	 */
	@RequestMapping(value = "/student/getpaperstatus.do")
	@ResponseBody
	public void getPaperStatus(HttpServletRequest request, HttpServletResponse response,
			ModelMap model) {
		int studentId = (Integer) request.getSession()
				.getAttribute("studentId");
		PaperState paperState = PaperState.TUTOR_UNASSIGNED;
		String result_json = "";
		Paper paper = null;
		// 获得学生论文状态
		try {
			paper = paperService.getPaperByStudentId(studentId);
			//Validate.notNull(paper);
			
			if (paper != null) {
				paperState = paper.getPaperState();
			} else {
				paperState = PaperState.TUTOR_UNASSIGNED;
			}
			
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("paperstatus", paperState);
		jsonobj.put("paper_status_CHN", paperState.getStatus());
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 获取论文提交后的进度
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value = "/student/getpaperprocess.do")
	@ResponseBody
	public void getPaperProcess(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		int studentId = (Integer) request.getSession()
				.getAttribute("studentId");
		logger.debug("student id: {}", studentId);
		String proposalfilename = "";
		String interimReportfilename = "";
		PaperState currentphase = PaperState.TUTOR_UNASSIGNED;

		String result_json = "";
		try {
			Proposal proposal = proposalService
					.getProposalByStudentId(studentId);
			if (proposal != null) {
				proposalfilename = FileOperateUtil.getFileName(proposal
						.getProposalAddress());
			}

			InterimReport interimReport = interimReportService
					.getInterimReportByStudentId(studentId);
			if (interimReport != null) {
				interimReportfilename = FileOperateUtil
						.getFileName(interimReport.getAddress());
			}
			result_json = SUCCESS;
		} catch (Exception e) {
			logger.error("exception", e);
			result_json = FAIL;
		}

		String actorId = (String) request.getSession().getAttribute("actorId");
		logger.debug("actor id: {}", actorId);
		Paper paper = paperService.getPaperByStudentId(studentId);
		if(paper != null) {
			currentphase = paper.getPaperState();
		}

		logger.debug("current phase: {}", currentphase);
		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("currentphase", currentphase);
		jsonobj.put("current_phase_CHN", currentphase.getStatus());
		jsonobj.put("proposalfile", proposalfilename);
		jsonobj.put("interimreportfile", interimReportfilename);
		jsonobj.put("result_json", result_json);
		logger.debug("json: {}", jsonobj);
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 提交论文，未提交状态下学生提交论文，包含papertitle
	 * 
	 * @author wsd
	 * @param papertitle
	 *            论文题目
	 * @param paperaffix
	 *            论文附言
	 */
	@RequestMapping(value = "/student/uploadpaper.do")
	@ResponseBody
	public void uploadPaper(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		String result_json = "";
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		MultipartFile file = multipartRequest.getFile("upload_file");

		int studentId = (Integer) request.getSession()
				.getAttribute("studentId");
		String filename = file.getOriginalFilename();
		String dir = "E:\\upload\\thesis\\" + studentId;
		File save = new File(dir, filename);

		try {
			save.createNewFile();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if (save.exists() == false) {
			save.mkdirs();
		}

		try {
			file.transferTo(save);
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 提交论文
	 * @param request
	 * @param response
	 * @param model
	 * @param papertitle
	 * @param paperaffix
	 */
	@RequestMapping(value = "/student/submitpaper.do")
	@ResponseBody
	public void submitPaper(HttpServletRequest request,
			HttpServletResponse response, ModelMap model, 
			@RequestParam("title") String papertitle, @RequestParam("affix") String paperaffix) {
		HttpSession session = request.getSession();
		String result_json = "";

		int studentId = (Integer) session.getAttribute("studentId");
		String actorId = (String) session.getAttribute("actorId");
		Paper paper = null;

		// 上传文件
		File save = FileOperateUtil.Upload(request,
				FileOperateUtil.getAbsoluteFileDir(actorId), papertitle, "submit_file");
		if (save == null) {
			result_json = FAIL;
			JSONObject jsonobj = new JSONObject();
			jsonobj.put("result_json", result_json);
			jsonUtil.sendJson(response, jsonobj);
		}
		
		paper = paperService.getPaperByStudentId(studentId);
		if (paper == null) {
			paper = new Paper();
			paper.setStudentId(studentId);
			paper.setPaperVersion(new Integer(0));
		}
		paper.setPaperTitle(papertitle);
		paper.setPaperAddress(FileOperateUtil.getRelativeFilePath(save.getAbsolutePath()));
		//paper.setPaperState(Constants.DRAFT_COMPLETED);
		paper.setPaperState(PaperState.FIRST_DRAFT_COMPLETED);
		paper.setPaperVersion(paper.getPaperVersion().intValue() + 1);
		paper.setPaperAffix1(paperaffix);// 学生的附言，放affix1 还是affix2要注意

		try {
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorId, "Submit Papers");
			for(Task task : taskList) {
				paperService.saveOrUpdatePaper(paper);
				activitiAPIUtils.completeTask(task.getId());
			}
			result_json = SUCCESS;
		} catch (Exception e) {
			logger.error("exception", e);
			result_json = FAIL;
		}

		//向导师发起会话
		studentPaperManager.sendSuggestion(studentId, save, paper);

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);	
	}
	
	/**
	 * 获取论文信息
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value = "/student/getpaper.do")
	@ResponseBody
	public void getPaper(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		int studentId = (Integer) request.getSession()
				.getAttribute("studentId");
		String result_json = "";
		JsonPaper jsonpaper = null;

		// 获得paper
		Paper paper = null;
		try {
			paper = paperService.getPaperByStudentId(studentId);
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		
		if(paper != null){
			jsonpaper = JsonPaper.paper2JsonPaper(paper,
				studentService.getStudentById(studentId));
		}
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("paper", jsonpaper);
		jsonobj.put("paperstatus", jsonpaper.getPaperStatement().getStatus());
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 更新论文
	 * @param request
	 * @param response
	 * @param model
	 * @param papertitle
	 * @param paperaffix1
	 */
	@RequestMapping(value = "/student/updatepaper.do")
	@ResponseBody
	public void updatePaper(HttpServletRequest request,
			HttpServletResponse response, ModelMap model, 
			@RequestParam("title") String papertitle, @RequestParam("affix") String paperaffix1) {
		String result_json = "";
		HttpSession session = request.getSession();

		int studentId = (Integer) session.getAttribute("studentId");
		String actorId = (String) session.getAttribute("actorId");
		
		logger.debug("paper title: {}", papertitle);
		logger.debug("paperaffix1: {}", paperaffix1);

		// 更新论文操作
		File save = FileOperateUtil.Upload(request,
				FileOperateUtil.getAbsoluteFileDir(actorId), papertitle, "update_file");
		if (save == null) {
			result_json = FAIL;
			JSONObject jsonobj = new JSONObject();
			jsonobj.put("result_json", result_json);
			jsonUtil.sendJson(response, jsonobj);
		}
		// 更新到数据库
		Paper opaper = paperService.getPaperByStudentId(studentId);
		opaper.setPaperAddress(FileOperateUtil.getRelativeFilePath(save.getAbsolutePath()));
		opaper.setPaperTitle(papertitle);
		opaper.setPaperAffix1(paperaffix1);
		opaper.setPaperVersion(opaper.getPaperVersion().intValue() + 1);
		paperService.updatePaper(opaper);

		try {
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 更新论文标题
	 * @param request
	 * @param response
	 * @param model
	 * @param papertitle
	 */
	@RequestMapping(value = "/student/updatepapername.do")
	@ResponseBody
	public void updatePaperName(HttpServletRequest request,
			HttpServletResponse response, ModelMap model, 
			@RequestParam("title") String papertitle) {
		String result_json = "";
		logger.debug("update paper name: {}", papertitle);
		HttpSession session = request.getSession();
		int studentId = (Integer) session.getAttribute("studentId");

		try {
			// 更新到数据库
			Paper opaper = paperService.getPaperByStudentId(studentId);
			Validate.notNull(opaper);
			opaper.setPaperTitle(papertitle);
			opaper.setPaperVersion(opaper.getPaperVersion().intValue() + 1);
			paperService.updatePaper(opaper);
			
			result_json = SUCCESS;
		}catch(NullPointerException ne) {
			logger.error("该学生还没有上传论文！", ne);
			result_json = FAIL;
		}catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 论文状态
	 */
	@RequestMapping(value = "/paperstatus.do", method = RequestMethod.POST)
	public String paperStatue(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		HttpSession session = request.getSession();
		int studentId = Integer.parseInt((String) session
				.getAttribute("actorId"));

		paperService.getPaperByStudentId(studentId);
		return "index";
	}

	/**
	 * 下载论文
	 * @param request
	 * @param response
	 * @param model
	 * @author zhanglei
	 */
	@RequestMapping(value = "/student/downloadpaper.do", method = RequestMethod.POST)
	public void downloadpaper(HttpServletRequest request,
			HttpServletResponse response, ModelMap model) {
		HttpSession session = request.getSession();
		int studentId = (Integer) session.getAttribute("studentId");

		Paper paper = paperService.getPaperByStudentId(studentId);
		String absolutepath = FileOperateUtil.getAbsoluteFilePath(paper.getPaperAddress());

		FileOperateUtil.Download(response, absolutepath);

		String result_json = "";
		try {
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}
}
