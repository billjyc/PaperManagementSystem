package nju.software.controller.dean;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import nju.software.entity.Course;
import nju.software.entity.StudentCourseInfo;
import nju.software.jsonmodel.JsonCourse;
import nju.software.jsonmodel.JsonStudentCourseInfo;
import nju.software.service.AccountService;
import nju.software.service.CourseService;
import nju.software.service.ReportService;
import nju.software.service.StudentCourseInfoService;
import nju.software.util.ExcelUtil;
import nju.software.util.JSONUtil;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * 教务员成绩管理控制类
 * @author billjyc
 *
 */
@Controller
public class DeanScoreManagementController extends AbstractDeanController{
	private static Logger logger = LoggerFactory.getLogger(DeanScoreManagementController.class);
	
	@Autowired
	private JSONUtil jsonUtil;
	@Autowired
	private AccountService accountService;
	@Autowired
	private ReportService reportService;
	@Autowired
	private CourseService courseService;
	@Autowired
	private StudentCourseInfoService studentCourseInfoService;
	
	private final static String SUCCESS = "success";
	private final static String FAIL = "fail";
	
	/**
	 * 所有成绩列表 
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value="/dean/getAllTranscript.do")
	@ResponseBody
	public void getAllTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		List<Course> result=courseService.getAllCourse();
		List<JsonCourse> courselist_j=jsonUtil.converToJsonCourse(result);
		JSONArray courselist_jsonobj=JSONArray.fromObject(courselist_j);
		JSONObject jsonobj=new JSONObject();
		jsonobj.put("list",courselist_jsonobj );
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 获取所有成绩单列表，分页
	 * @author wss
	 * 
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/dean/transciptList.do")
	public void getTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		Integer type = Integer.parseInt(request.getParameter("type"));
		String pageS = request.getParameter("page");
		String rowsS = request.getParameter("rows");
		String sidx = request.getParameter("sidx");
		String sord = request.getParameter("sord");
		String search=request.getParameter("_search");
		int page = (pageS == null) ? 0 : Integer.parseInt(pageS);
		int limit = (rowsS == null) ? 1000 : Integer.parseInt(rowsS);
		List<StudentCourseInfo> sci=null;
		JSONObject jsonobj = new JSONObject();
		if(search.equalsIgnoreCase("true")){
			String  searchOper = request.getParameter("searchOper"); 
			String  searchString = request.getParameter("searchString"); 
			String  searchField = request.getParameter("searchField"); 
			String searchCondition=getSearch(searchField,searchOper,searchString);
			sci=studentCourseInfoService.findSearchStudentScore(searchCondition);

		}else{
			HashMap<String,Object> params=new HashMap<String,Object>();
			params.put("page", page);
			params.put("limit", limit);
			params.put("sidx", sidx);
			params.put("sord", sord);
			params.put("type", type);

			List<Object> result = studentCourseInfoService.getStudentAssignedCourse(params);
			sci = (List<StudentCourseInfo>)result.get(0);

			HashMap<String,Object> limits = (HashMap<String,Object>)result.get(1);

			jsonobj.put("page", limits.get("page"));
			jsonobj.put("total_pages", limits.get("total_pages"));
			jsonobj.put("records", limits.get("count"));
		}

		List<JsonStudentCourseInfo> sci_j = jsonUtil.converToJsonStudentCourseInfo(sci);

		JSONArray sci_jsonobj = JSONArray.fromObject(sci_j);
		jsonobj.put("list", sci_jsonobj);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获取没有审核通过的成绩列表，分页
	 * @author wss
	 * wss
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/dean/uncheckedTranscript.do")
	public void getUncheckedTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String pageS = request.getParameter("page");
		String rowsS = request.getParameter("rows");
		String sidx = request.getParameter("sidx");
		String sord = request.getParameter("sord");

		int page = (pageS == null) ? 0 : Integer.parseInt(pageS);
		int limit = (rowsS == null) ? 1000 : Integer.parseInt(rowsS);

		HashMap<String,Object> params=new HashMap<String,Object>();
		params.put("page", page);
		params.put("limit", limit);
		params.put("sidx", sidx);
		params.put("sord", sord);


		List<Object> result = studentCourseInfoService.getUncheckedTranscript(params);
		List<StudentCourseInfo> studentCourseList = (List<StudentCourseInfo>)result.get(0);

		HashMap<String,Object> limits = (HashMap<String,Object>)result.get(1);

		List<JsonStudentCourseInfo> courseList_j = jsonUtil.converToJsonStudentCourseInfo(studentCourseList);

		JSONArray courseList_jsonobj = JSONArray.fromObject(courseList_j);

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", courseList_jsonobj);
		jsonobj.put("page", limits.get("page"));
		jsonobj.put("total_pages", limits.get("total_pages"));
		jsonobj.put("records", limits.get("count"));
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获取审核通过的成绩列表，分页
	 * @author wss
	 * wss
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/dean/checkedTranscript.do")
	public void getCheckedTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String pageS = request.getParameter("page");
		String rowsS = request.getParameter("rows");
		String sidx = request.getParameter("sidx");
		String sord = request.getParameter("sord");

		int page = (pageS == null) ? 0 : Integer.parseInt(pageS);
		int limit = (rowsS == null) ? 1000 : Integer.parseInt(rowsS);

		HashMap<String,Object> params=new HashMap<String,Object>();
		params.put("page", page);
		params.put("limit", limit);
		params.put("sidx", sidx);
		params.put("sord", sord);

		List<Object> result = studentCourseInfoService.getCheckedTranscript(params);
		List<StudentCourseInfo> studentCourseList = (List<StudentCourseInfo>)result.get(0);

		HashMap<String,Object> limits = (HashMap<String,Object>)result.get(1);

		List<JsonStudentCourseInfo> courseList_j = jsonUtil.converToJsonStudentCourseInfo(studentCourseList);
		JSONArray courseList_jsonobj = JSONArray.fromObject(courseList_j);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", courseList_jsonobj);
		jsonobj.put("page", limits.get("page"));
		jsonobj.put("total_pages", limits.get("total_pages"));
		jsonobj.put("records", limits.get("count"));
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 导入成绩单excel
	 * 2014-4-25下午07:25:39
	 * @author Jay，Wang
	 */
	@RequestMapping(value = "/dean/importTransciptExcel.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void importTranscriptExcel(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		response.setContentType("text/html;charset=UTF-8");
		String result = "";
		JSONObject jsonobj = new JSONObject();
		try {   
			ExcelUtil excel=new ExcelUtil();
			List<ArrayList<String>> dataLst=excel.
					importExcel(request, response,"file");//调用静态类ExcelUitl导入EXCEL	
			Iterator<ArrayList<String>> it = dataLst.iterator();
			it.next();
			while (it.hasNext()) {
				ArrayList<String> innerLst = it.next();
				StudentCourseInfo sci = new StudentCourseInfo();
				if(!innerLst.get(0).equals("")){
					sci.setCourseNo(innerLst.get(0));
					sci.setCourseName(innerLst.get(1));
					sci.setStudentNo(innerLst.get(2));
					sci.setStudentName(innerLst.get(3));
					sci.setScore(Integer.valueOf(innerLst.get(4)));
					sci.setDate(Integer.valueOf(innerLst.get(5)));
					try{
						// Add course
						studentCourseInfoService.addStudentCourseInfo(sci);
					}catch(Exception e){
						e.printStackTrace();
					}
				}
				result = "导入成功";
			}
		}catch(Exception e){
			if (result != null)
				result = "请输入正确的文件,格式依照本页成绩列表";
			e.printStackTrace();
		}
		jsonobj.put("result", result);
		jsonUtil.sendJson(response, jsonobj);
	}


	/**
	 * 导出所有成绩excel
	 */
	@RequestMapping(value = "/dean/exportTranscriptExcel.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void exportTranscriptExcel(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		HSSFWorkbook wb =reportService.exportTranscript();
		response.setContentType("application/vnd.ms-excel;charset=UTF-8");  
		response.setHeader("Content-disposition", "attachment;filename=transcript.xls");  
		OutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			wb.write(ouputStream);  
			ouputStream.flush();  
			ouputStream.close();  
		}catch(IOException e){
			e.printStackTrace();
		}  
	}

	/**
	 * 导出指定课程成绩单excel
	 */
	@RequestMapping(value = "/dean/exportCourseTranscriptExcel.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void exportCourseTranscriptExcel(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		String courseNo="cs112";
		HSSFWorkbook wb =reportService.exportTranscriptByCourseNo(courseNo);
		response.setContentType("application/vnd.ms-excel;charset=UTF-8");  
		response.setHeader("Content-disposition", "attachment;filename="+courseNo+" transcript.xls");  
		OutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			wb.write(ouputStream);  
			ouputStream.flush();  
			ouputStream.close();  
		}catch(IOException e){
			e.printStackTrace();
		}  
	}


	/**
	 * 导出指定学生成绩单excel
	 */
	@RequestMapping(value = "/dean/exportStudentTranscriptExcel.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void exportStudentTranscriptExcel(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		String transcripstr = request.getParameter("transcripstr").toString();
		JSONObject paper_json = JSONObject.fromObject(transcripstr);
		String studentNo = paper_json.getString("studentNo");
		HSSFWorkbook wb =reportService.exportTranscriptByStudentNo(studentNo);
		response.setContentType("application/vnd.ms-excel;charset=UTF-8");  
		response.setHeader("Content-disposition", "attachment;filename="+studentNo+" transcript.xls");  
		OutputStream ouputStream;
		try {
			ouputStream = response.getOutputStream();
			wb.write(ouputStream);  
			ouputStream.flush();  
			ouputStream.close();  
		}catch(IOException e){
			e.printStackTrace();
		}  
		String result=SUCCESS;
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result", result);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 审核通过所有成绩单
	 */
	@RequestMapping(value = "/dean/approveTranscript.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void approveTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String result="";
		try{
			studentCourseInfoService.approveStudentCourseInfo();
			result=SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
		} 

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result", result);
		jsonUtil.sendJson(response, jsonobj);
	}


	/**
	 * 审核通过某个成绩单
	 */
	@RequestMapping(value = "/dean/dealWithTranscript.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void dealWithTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String transcripstr = request.getParameter("transcripstr").toString();
		JSONObject paper_json = JSONObject.fromObject(transcripstr);
		Integer transcriptId = paper_json.getInt("id");
		String detection = paper_json.getString("detection");
		String result="";
		try{
			if(detection.equals("true")){
				studentCourseInfoService.approveStudentCourseInfo(transcriptId);
			}
			else if(detection.equals("false")){
				studentCourseInfoService.rejectStudentCourseInfo(transcriptId);
			}
			result=SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
		} 

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result", result);
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 驳回所有成绩单
	 */
	@RequestMapping(value = "/dean/rejectTranscript.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void rejectTranscript(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String result="";
		try{
			studentCourseInfoService.rejectStudentCourseInfo();
			result=SUCCESS;
		}catch(Exception e){

			e.printStackTrace();
		}
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result", result);
		jsonUtil.sendJson(response, jsonobj);
	}
}
