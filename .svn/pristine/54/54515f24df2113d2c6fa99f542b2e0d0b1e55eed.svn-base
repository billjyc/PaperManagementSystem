package nju.software.controller.teacher;

import java.io.File;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import nju.software.entity.Accessory;
import nju.software.entity.Judge;
import nju.software.entity.Paper;
import nju.software.entity.Student;
import nju.software.entity.Suggestion;
import nju.software.entity.Teacher;
import nju.software.entity.enums.PaperState;
import nju.software.jsonmodel.TeacherJudgeTask;
import nju.software.manager.teacher.TeacherReviewManager;
import nju.software.service.AccountService;
import nju.software.service.JudgeService;
import nju.software.service.PaperService;
import nju.software.service.StudentService;
import nju.software.service.SuggestionService;
import nju.software.service.TeacherService;
import nju.software.util.ActivitiAPIUtils;
import nju.software.util.Constants;
import nju.software.util.FileOperateUtil;
import nju.software.util.JSONUtil;

import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.commons.lang3.Validate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * 教师评审控制类
 * @author billjyc
 * @date 2015-3-21
 */
@Controller
public class TeacherReviewController {
	@Autowired
	private JSONUtil jsonUtil;
	@Autowired
	private ActivitiAPIUtils activitiAPIUtils;
	
	private static Logger logger = LoggerFactory.getLogger(TeacherReviewController.class);
	private final static String SUCCESS = "success";
	private final static String FAIL = "fail";
	
	@Autowired
	private SuggestionService suggestionService;
	@Autowired
	private TeacherService teacherService;
	@Autowired
	private StudentService studentService;
	@Autowired
	private PaperService paperService;
	@Autowired
	private JudgeService judgeService;
	@Autowired
	private AccountService accountService;
	@Autowired
	private TeacherReviewManager teacherReviewManager;
	
	/**
	 * 获得教师需要评审的list
	 */
	@RequestMapping(value="/tutor/reviewlist.do")
	@ResponseBody
	public void getReviewList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<TeacherJudgeTask> list = new ArrayList<TeacherJudgeTask>();
		List<Task> taskList = null;

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		int teacherId = (Integer) session.getAttribute("teacherId");
		try{
			Teacher teacher = teacherService.getTeacherById(teacherId);
			//判断该老师是内部还是外部教师
			if(teacher.getTeacherClasses() == Constants.INNERTEACHER) {
				taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Internal Review");
			}else if(teacher.getTeacherClasses() == Constants.OUTERTEACHER) {
				taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "External Review");
			}

			for(Task task : taskList) {
				ProcessInstance instance = activitiAPIUtils.getProcessInstance(task.getId());
				if(instance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(instance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					logger.debug("paper_id: {}", paper.getPaperId());
					Judge judge = judgeService.findJudgeByPaperIdandTeacherId(paper.getPaperId(), teacherId);
					list.add(TeacherJudgeTask.toTeacherJudgeTask(student, paper,judge.getJudgeDeadline(), Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 评审老师提交评审意见
	 * */
	@RequestMapping(value="/tutor/submitreview.do")
	@ResponseBody
	public void submitReview(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("paperid")String paperIdS, @RequestParam("taskid") String taskIdS, 
			@RequestParam("result")String resultS, 
			@RequestParam("judge_content_teacher") String toteacher, //评审老师给指导老师的意见
			@RequestParam("judge_content_student") String tostudent) { //评审老师给学生的意见
		String actorNo =  (String)request.getSession().getAttribute("actorNo");
		Integer paperId = Integer.parseInt(paperIdS);
		Long.parseLong(taskIdS);
		boolean result = resultS.equals("passed") ? true : false ; 
		String result_json = "";
		try{
			Judge judge = judgeService.findJudgeByPaperIdandTeacherId(paperId, (Integer)request.getSession().getAttribute("teacherId"));
			judge.setJudgeContentStudent(tostudent);
			judge.setJudgeContentTeacher(toteacher);
			judge.setJudgeResult(request.getParameter("result"));
			// 上传文件
			int studentId = paperService.getPaperByPaperId(paperId).getStudentId();
			String studentNumber = studentService.getStudentById(studentId).getStudentNumber();
			File save = FileOperateUtil.Upload(request,
					FileOperateUtil.getAbsoluteFileDir(studentNumber), "review_affix_" + actorNo, "submit_file");
			if (save == null) {
				result_json = FAIL;
				JSONObject jsonobj = new JSONObject();
				jsonobj.put("result_json", result_json);
				jsonUtil.sendJson(response, jsonobj);
			}
			judge.setJudgeAffix(FileOperateUtil.getRelativeFilePath(save.getAbsolutePath()));

			Teacher teacher = teacherService.getTeacherByTeacherNumber(actorNo);
			Validate.notNull(teacher);
			Map<String, Object> data = new HashMap<String, Object>();
			
			if(teacher.getTeacherClasses() == Constants.INNERTEACHER) {
				data.put("internalReview", result);
			} else if(teacher.getTeacherClasses() == Constants.OUTERTEACHER) {
				data.put("externalReview", result);
			}
			//data.put("review", result);
			judgeService.updateJudge(judge);
			Paper paper = paperService.getPaperByPaperId(paperId);
			ProcessInstance instance = activitiAPIUtils.getProcessInstance(taskIdS);
			
			//完成任务
			activitiAPIUtils.completeTask(taskIdS, data);
			Boolean internalReview = (Boolean)activitiAPIUtils.getVariable(instance.getId(), "internalReview");
			Boolean externalReview = (Boolean)activitiAPIUtils.getVariable(instance.getId(), "externalReview");
			
			//只有当2个评审老师全部给出评审意见的时候，状态才会改变
			if(internalReview != null && externalReview != null) {
				if(internalReview && externalReview) {
					paper.setPaperState(PaperState.JUDGE_PASSED);
					logger.debug("judge passed");
				} else {
					paper.setPaperState(PaperState.UNCOMMITED);
				}
				paperService.updatePaper(paper);
			}
			
			result_json = SUCCESS;

			//系统向学生发起会话
			teacherReviewManager.submitReviewSuggestion(paperId, actorNo, studentNumber, save, tostudent, toteacher);
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}
	
	/**
	 * 获取已处理的评审的列表
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value="/tutor/reviewedlist.do")
	@ResponseBody
	public void getReviewedList(HttpServletRequest request,HttpServletResponse response,ModelMap model) {
		
	}
}
