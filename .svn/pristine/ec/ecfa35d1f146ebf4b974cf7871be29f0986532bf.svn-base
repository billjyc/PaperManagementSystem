package nju.software.controller;

import java.io.File;
import java.sql.Timestamp;
import java.util.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import nju.software.entity.Accessory;
import nju.software.entity.Account;
import nju.software.entity.Course;
import nju.software.entity.Defence;
import nju.software.entity.Fee;
import nju.software.entity.InterimReport;
import nju.software.entity.Judge;
import nju.software.entity.Paper;
import nju.software.entity.Proposal;
import nju.software.entity.Student;
import nju.software.entity.StudentCourseInfo;
import nju.software.entity.Suggestion;
import nju.software.entity.Teacher;
import nju.software.jsonmodel.BeforeDefenseTask;
import nju.software.jsonmodel.DefenseTask;
import nju.software.jsonmodel.FirstCheckTask;
import nju.software.jsonmodel.InterimReportTask;
import nju.software.jsonmodel.JsonCourse;
import nju.software.jsonmodel.JsonFee;
import nju.software.jsonmodel.JsonInterimReport;
import nju.software.jsonmodel.JsonPaper;
import nju.software.jsonmodel.JsonProposal;
import nju.software.jsonmodel.JsonStudentCourseInfo;
import nju.software.jsonmodel.JsonTeacher;
import nju.software.jsonmodel.ProposalTask;
import nju.software.jsonmodel.JsonStudent;
import nju.software.jsonmodel.TeacherJudgeTask;
import nju.software.service.AccountService;
import nju.software.service.CourseService;
import nju.software.service.DefenceService;
import nju.software.service.FeeService;
import nju.software.service.InterimReportService;
import nju.software.service.JudgeService;
import nju.software.service.PaperService;
import nju.software.service.ProposalService;
import nju.software.service.StudentCourseInfoService;
import nju.software.service.StudentService;
import nju.software.service.SuggestionService;
import nju.software.service.TeacherService;
import nju.software.util.ActivitiAPIUtils;
import nju.software.util.Constants;
import nju.software.util.ExcelUtil;
import nju.software.util.FileOperateUtil;
import nju.software.util.JSONUtil;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.commons.lang3.Validate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class TeacherController {
	@Autowired
	private ActivitiAPIUtils activitiAPIUtils;
	@Autowired
	private StudentService studentService;
	@Autowired
	private FeeService feeService;
	@Autowired
	private CourseService courseService;
	@Autowired
	private TeacherService teacherService;
	@Autowired
	private PaperService paperService;
	@Autowired
	private JudgeService judgeService;
	@Autowired
	private AccountService accountService;
	@Autowired
	private ProposalService proposalService;
	@Autowired
	private InterimReportService interimReportService;
	@Autowired
	SuggestionService suggestionService ;
	@Autowired
	StudentCourseInfoService studentCourseInfoService;
	@Autowired
	private DefenceService defenceService;
	@Autowired
	private JSONUtil jsonUtil;
	private static Logger logger = LoggerFactory.getLogger(TeacherController.class);
	private final static String SUCCESS = "success";
	private final static String FAIL = "fail";
	public static final int MAX_RESULT = 1000;

	/**
	 * 查看老师信息
	 */
	@RequestMapping(value = "/tutor/teacherinfo.do")
	public void teacherInfo(HttpServletRequest request, HttpServletResponse response,ModelMap model) {
		int teacherId = (Integer) request.getSession().getAttribute("teacherId");
		Teacher teacher = null;
		String result_json = "";
		try {
			teacher = teacherService.getTeacherById(teacherId);
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		// 转换为jsonstudent
		JsonTeacher jsonteacher = new JsonTeacher(teacher);

		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("teacher", jsonteacher);
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}


	@RequestMapping(value = "/tutor/updateTeacherInfo.do")
	@ResponseBody
	public void updateTeacherInfo(HttpServletRequest request,
			HttpServletResponse response, ModelMap model, 
			@RequestParam("email") String email, @RequestParam("phone") String phone) {
		int teacherId = (Integer) request.getSession()
				.getAttribute("teacherId");

		logger.debug("email: {}, phone: {}", email, phone);
		Teacher teacher = null;
		String result_json = "";
		try {
			teacher = teacherService.getTeacherById(teacherId);
			teacher.setTeacherEmail(email);
			teacher.setTeacherPhone(phone);
			teacherService.updateTeacherInfo(teacher);
			result_json = SUCCESS;
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}

		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}	

	@RequestMapping(value = "/tutor/changePassword.do")
	@ResponseBody
	public void changePassword(HttpServletRequest request,
			HttpServletResponse response, ModelMap model,
			@RequestParam("oPassword") String oPassword, 
			@RequestParam("nPassword") String nPassword){

		int accountId = (Integer) request.getSession()
				.getAttribute("accountId");

		logger.debug("accountId: {}, oPassword: {}, nPassword: {}", accountId, oPassword, nPassword);
		Account account = null;
		String result_json = "";
		try {
			account = accountService.getAccountByAccountId(accountId);

			if(account.getAccountPassword().equals(oPassword)){
				account.setAccountPassword(nPassword);
				accountService.updateAccount(account);
				result_json = SUCCESS;	
			}
			else{
				result_json = FAIL;
			}
		} catch (Exception e) {
			e.printStackTrace();
			result_json = FAIL;
		}
		// 返回json数据
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}


	/**
	 * 获得教师负责的学生列表
	 * @author wsd
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/tutor/studentlist.do")
	public void studentList(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		String pageS = request.getParameter("page");
		String rowsS = request.getParameter("rows");
		String sidx = request.getParameter("sidx");
		String sord = request.getParameter("sord");

		int teacherId = (Integer) request.getSession().getAttribute("teacherId");
		int page=0;
		int rows=MAX_RESULT;

		page = (pageS == null) ? 0 : Integer.parseInt(pageS);
		rows = (rowsS == null) ? MAX_RESULT : Integer.parseInt(rowsS);

		HashMap<String, Object> params=new HashMap<String, Object>();
		params.put("page", page);
		params.put("limit", rows);
		params.put("sidx", sidx);
		params.put("sord", sord);

		List<Student> studentList = null;
		List<JsonStudent> jsonStudentList = null;
		HashMap<String,Object> limits = null;

		String result_json = "";
		try{
			List<Object> result= studentService.getStudentsByTeacherIdLimit(teacherId, params);
			studentList = (List<Student>)result.get(0);	//查询的学生列表
			limits = (HashMap<String, Object>) (result.get(1));	//分页信息

			jsonStudentList = new ArrayList<JsonStudent>();
			for(Student student: studentList){
				int accountId = accountService.getAccountByAccountname(student.getStudentNumber()).getAccountId();
				JsonStudent jsonStudent= new JsonStudent(student);
				jsonStudent.setAccountId(accountId);
				jsonStudentList.add(jsonStudent);
			}

			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONArray jsonlist = JSONArray.fromObject(jsonStudentList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("page", limits.get("page"));
		jsonobj.put("total_pages", limits.get("total_pages"));
		jsonobj.put("records", limits.get("count"));
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得老师负责的课程信息列表
	 * @author Jerry.Lu
	 */
	@RequestMapping(value = "/tutor/getallcourseInfo.do")
	@ResponseBody
	public void getGradeList(HttpServletRequest request,HttpServletResponse response,
			ModelMap model){
		HttpSession session = request.getSession();
		String teacherNo = (String) session.getAttribute("actorNo");
		List<Course> courseList = courseService.getCoursesByTeacherNo(teacherNo);
		List<StudentCourseInfo> courseInfoList = new ArrayList<StudentCourseInfo>();
		for (int i=0;i<courseList.size();i++){
			String courseNo=courseList.get(i).getCourseNo();
			List<StudentCourseInfo> tempCourseInfo = studentCourseInfoService.getInfoByCourseNo(courseNo);
			for (int j=0;j<tempCourseInfo.size();j++){				
				courseInfoList.add(tempCourseInfo.get(j));
			}
			tempCourseInfo=null;
		}
		String result_json = "";
		ArrayList<JsonStudentCourseInfo> jsonCourseInfoList  = new ArrayList<JsonStudentCourseInfo>();
		try{
			if(courseInfoList!=null){
				for(int i=0;i<courseInfoList.size();i++){
					StudentCourseInfo courseInfo = courseInfoList.get(i);
					if(courseInfo!=null){						
						jsonCourseInfoList.add(new JsonStudentCourseInfo(courseInfo));
					}
				}
			}
			result_json = "success";
		}catch(Exception e){
			logger.error("get course list failed: ",e);
			result_json = FAIL;
		}
		JSONArray jsonlist = JSONArray.fromObject(jsonCourseInfoList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得老师负责的课程列表
	 * @author Jerry.Lu
	 */
	@RequestMapping(value = "/tutor/getallcourse.do")
	@ResponseBody
	public void getCousreList(HttpServletRequest request,HttpServletResponse response,
			ModelMap model){
		HttpSession session = request.getSession();
		String teacherNo = (String) session.getAttribute("actorNo");

		List<Course> courseList = courseService.getCoursesByTeacherNo(teacherNo);
		String result_json = "";
		ArrayList<JsonCourse> jsonCourseList = new ArrayList<JsonCourse>();
		try{
			if(courseList!=null){
				for(int i=0;i<courseList.size();i++){
					Course course = courseList.get(i);
					if(course!=null){
						JsonCourse jsonCourse = JsonCourse.course2JsonCourse(course);
						jsonCourseList.add(jsonCourse);
					}
				}
			}
			result_json = "success";
		}catch(Exception e){
			logger.error("get course list failed: ",e);
			result_json = FAIL;
		}
		JSONArray jsonlist = JSONArray.fromObject(jsonCourseList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得老师负责的学生的论文列表
	 * @author dinglingjuan
	 */
	@RequestMapping(value = "/tutor/getallthesis.do")
	@ResponseBody
	public void getAllList(HttpServletRequest request,HttpServletResponse response,
			ModelMap model){
		HttpSession session = request.getSession();
		int teacherId = (Integer) session.getAttribute("teacherId");
		List<Student> studentList = studentService.getStudentsByTeacherId(teacherId);
		String result_json = "";
		ArrayList<JsonPaper> paperList = new ArrayList<JsonPaper>();
		try{
			if(studentList != null){
				for(int i = 0;i < studentList.size(); i++){
					int studentId = studentList.get(i).getStudentId();
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(studentId);
					if(paper != null){
						JsonPaper jsonPaper = JsonPaper.paper2JsonPaper(paper,student);
						paperList.add(jsonPaper);
					}
				}
			}
			result_json = "success";
		}catch(Exception e){
			logger.error("get all thesis list failed: ",e);
			result_json = FAIL;
		}
		JSONArray jsonlist = JSONArray.fromObject(paperList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得待审开题报告
	 */
	@RequestMapping(value = "/tutor/getuncheckedproposal.do")
	@ResponseBody
	public void getUncheckedProposal(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String actorNo = (String) request.getSession().getAttribute("actorNo");
		List<ProposalTask> proposalList = new ArrayList<ProposalTask>();
		logger.debug("actor Id: {}", actorNo);

		String result_json = "";
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Proposal Finalize");
			for(Task task : taskList) {
				ProcessInstance instance = activitiAPIUtils.getProcessInstance(task.getId());
				logger.debug("process instance id: {}", instance.getId());
				if(instance != null) {
					int studentId = (Integer) (activitiAPIUtils.getVariable(instance.getId(), "studentId"));
					Student student = studentService.getStudentById(studentId);
					Proposal proposal = proposalService.getProposalByStudentId(studentId);

					if(proposal.getStatus() == Constants.PROPOSAL_UNCHECKED) {
						proposalList.add(new ProposalTask(proposal, student, Long.parseLong(task.getId())));
					}
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			logger.error("get first check list failed", e);
			result_json = FAIL;
		}

		JSONArray jsonlist = JSONArray.fromObject(proposalList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);

	}

	/**
	 * 获得已通过开题报告
	 */
	@RequestMapping(value = "/tutor/getpassedproposal.do")
	@ResponseBody
	public void getPassedProposal(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		int teacherId = (Integer) request.getSession().getAttribute("teacherId");
		List<JsonProposal> jsonList = new ArrayList<JsonProposal>();
		String result_json = "";
		try{
			List<Proposal> proposalList = proposalService.getProposalByStatus(Constants.PROPOSAL_PASSED, teacherId);
			for(Proposal proposal : proposalList){
				Student s = studentService.getStudentById(proposal.getStudentId());
				jsonList.add(new JsonProposal(proposal, s));
			}
			result_json = SUCCESS;
		}catch(Exception e){
			logger.error("get first check list failed: ",e);
			result_json = FAIL;
		}
		JSONArray jsonlist = JSONArray.fromObject(jsonList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 判定开题报告是否通过
	 */
	@RequestMapping(value="/tutor/judgeproposal.do")
	@ResponseBody
	public void judgeProposal(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("jsonstr") String judgestr) {

		JSONObject judge_json = JSONObject.fromObject(judgestr);
		Integer proposalId = judge_json.getInt("proposalId");
		long taskId = judge_json.getLong("taskId");
		boolean result = judge_json.getInt("result") == Constants.PROPOSAL_PASSED ? true : false ; 

		String result_json = "";
		try{
			Proposal proposal = proposalService.getProposalById(proposalId);
			Validate.notNull(proposal);

			if(result)
				proposal.setStatus(Constants.PROPOSAL_PASSED);
			else {
				proposal.setStatus(Constants.PROPOSAL_FAILED);
			}

			Map<String, Object> data = new HashMap<String, Object>();
			data.put("isPassed", result);
			//更新开题报告状态
			proposalService.updateProposal(proposal);
			//教师完成任务
			activitiAPIUtils.completeTask(String.valueOf(taskId), data);
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得待审中期报告
	 */
	@RequestMapping(value = "/tutor/getuncheckedinterim.do")
	@ResponseBody
	public void getUncheckedInterim(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		String actorNo = (String) request.getSession().getAttribute("actorNo");
		List<InterimReportTask> interimReportTask = new ArrayList<InterimReportTask>();

		String result_json = "";
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Interim Report Finalize");
			for(Task task : taskList) {
				ProcessInstance instance = activitiAPIUtils.getProcessInstance(task.getId());
				logger.debug("process instance id: {}", instance.getId());

				if(instance != null) {
					int studentId = (Integer) (activitiAPIUtils.getVariable(instance.getId(), "studentId"));
					Student student = studentService.getStudentById(studentId);
					InterimReport ir = interimReportService.getInterimReportByStudentId(studentId);
					if(ir.getStatus() == Constants.INTERIM_REPORT_UNCHECKED) {
						interimReportTask.add(new InterimReportTask(ir, student, Long.parseLong(task.getId())));
					}
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			result_json = FAIL;
			e.printStackTrace();
		}

		JSONArray jsonlist = JSONArray.fromObject(interimReportTask);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得已通过中期报告
	 */
	@RequestMapping(value = "/tutor/getpassedinterim.do")
	@ResponseBody
	public void getPassedInterim(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		int teacherId = (Integer) request.getSession().getAttribute("teacherId");
		List<JsonInterimReport> jsonList = new ArrayList<JsonInterimReport>();
		String result_json = "";
		try{
			List<InterimReport> irList = interimReportService.getInterimReportByStatus(Constants.INTERIM_REPORT_PASSED, teacherId);
			logger.debug("interim report list size: {}", irList.size());
			for(InterimReport ir : irList){
				Student s = studentService.getStudentById(ir.getStudentId());
				jsonList.add(new JsonInterimReport(ir, s));
			}
			result_json = SUCCESS;
		}catch(Exception e){
			logger.error("get first check list failed: ",e);
			result_json = FAIL;
		}
		JSONArray jsonlist = JSONArray.fromObject(jsonList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 判定中期报告是否通过
	 */
	@RequestMapping(value="/tutor/judgeinterim.do")
	@ResponseBody
	public void judgeInterim(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("jsonstr") String judgestr){
		request.getSession().getAttribute("actorNo");

		JSONObject judge_json = JSONObject.fromObject(judgestr);
		Integer interimReportId = judge_json.getInt("interimReportId");
		long taskId = judge_json.getLong("taskId");
		boolean result = judge_json.getInt("result") == Constants.INTERIM_REPORT_PASSED ? true : false ; 
		logger.debug("interim report id: {}, taskId: {}, result: {}", interimReportId, taskId, result);

		String result_json = "";
		try{
			InterimReport ir = interimReportService.getInterimReportById(interimReportId);
			Validate.notNull(ir);
			if(result)
				ir.setStatus(Constants.INTERIM_REPORT_PASSED);
			else {
				ir.setStatus(Constants.INTERIM_REPORT_FAILED);
			}

			Map<String, Object> data = new HashMap<String, Object>();
			data.put("isPassed", result);
			interimReportService.updateInterimReport(ir);

			activitiAPIUtils.completeTask(String.valueOf(taskId), data);
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得初稿待定稿列表
	 */
	@RequestMapping(value = "/tutor/getfirstcheck.do")
	@ResponseBody
	public void getFirstCheck(HttpServletRequest request, HttpServletResponse response,
			ModelMap model){
		HttpSession session = request.getSession();
		String actorNo = (String) session.getAttribute("actorNo");
		String result_json = "";
		ArrayList<FirstCheckTask> firstCheckTaskList = new ArrayList<FirstCheckTask>();

		List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Preliminary Finalize");
		try{
			for(Task task : taskList) {
				ProcessInstance instance = activitiAPIUtils.getProcessInstance(task.getId());

				if(instance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(instance.getId(), "studentId");
					Student student = studentService.getStudentById(studentId);
					Paper paper = paperService.getPaperByStudentId(studentId);

					FirstCheckTask firstCheckTask = FirstCheckTask.toFirstCheckTask(paper, student, Long.parseLong(task.getId()));
					firstCheckTaskList.add(firstCheckTask);
				}
			}

			result_json = SUCCESS;
		}catch(Exception e){
			logger.error("get first check list failed: ",e);
			result_json = FAIL;
		}

		JSONArray jsonlist = JSONArray.fromObject(firstCheckTaskList);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", jsonlist);
		jsonobj.put("result_json", result_json);

		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 判断初审待定稿是否通过
	 *@author jerry.lu 
	 *@date   2014.3.18
	 */
	@RequestMapping(value = "/tutor/judgefirstcheck.do")
	@ResponseBody
	public void judgeFirstCheck(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("paper_id") String paperIdS, 
			@RequestParam("task_id") String taskIdS, 
			@RequestParam("result") String resultS, 
			@RequestParam("addtion") String addition) {
		String actorNo = (String) request.getSession().getAttribute("actorNo");
		Integer paperId = Integer.parseInt(paperIdS);
		Long.parseLong(taskIdS);
		boolean result = resultS.equals(Constants.THE_FIRST_FINALIZED) ? true : false ; 
		String result_json = "";

		if (result == true){
			//初稿通过
			try {
				Paper paper = paperService.getPaperByPaperId(paperId);
				if(paper!=null){
					paper.setPaperState(Constants.THE_FIRST_FINALIZED);				

					paperService.updatePaper(paper);
					result_json = SUCCESS;

					logger.info("导师提交指导意见");
					//导师向学生开启回话submit_views
					Timestamp time1 = new Timestamp(new Date().getTime());	
					File views = FileOperateUtil
							.Upload(request, getAbsoluteFileDir(actorNo), "views"+time1,
									"submit_views");

					Student sugg_s=studentService.getStudentById(paperService.getPaperByPaperId(paperId).getStudentId());
					Teacher sugg_t=teacherService.getTeacherById(sugg_s.getTeacherId());
					logger.debug("teacher name: {}", sugg_t.getTeacherName());
					logger.debug("student name: {}", sugg_s.getStudentName());

					Suggestion sugg=new Suggestion();
					sugg.setLevel(0);
					sugg.setPaperId(0);

					sugg.setReceiverId(accountService.getAccountByAccountname(sugg_s.getStudentNumber()).getAccountId());
					sugg.setSuggestContent("提交初步定稿意见");
					Timestamp time = new Timestamp(new Date().getTime());
					sugg.setSuggestTime(time);
					sugg.setUserId(accountService.getAccountByAccountname(sugg_t.getTeacherNumber()).getAccountId());
					sugg.setSenderName(sugg_t.getTeacherName());
					sugg.setSuggestTitle("导师提交初步定稿意见");


					try {
						int new_sugg_id = suggestionService.addSuggestion(sugg);
						String affix = getRelativeFilePath(views
								.getAbsolutePath());
						Accessory a = new Accessory();
						a.setPath(affix);
						a.setSuggestionId(new_sugg_id);//添加附件
						suggestionService.addAccessory(a);
					} catch (Exception e) {
						e.printStackTrace();
					}	
				}
			} catch (Exception e) {
				e.printStackTrace();
				result_json = FAIL;
			}
		} else {
			//初稿未通过
			//TO DO	给学生发送通知
			try {
				Paper paper = paperService.getPaperByPaperId(paperId);
				if(paper != null){
					paper.setPaperState(Constants.UNCOMMITTED);						

					paperService.updatePaper(paper);
					result_json = SUCCESS;
					logger.info("导师提交指导意见");
					//导师向学生开启回话submit_views
					Timestamp time1 = new Timestamp(new Date().getTime());	
					File views = FileOperateUtil
							.Upload(request, getAbsoluteFileDir(actorNo), "annotations"+time1,
									"submit_annotations");

					Student sugg_s=studentService.getStudentById(paperService.getPaperByPaperId(paperId).getStudentId());
					Teacher sugg_t=teacherService.getTeacherById(sugg_s.getTeacherId());
					logger.debug("teacher name: {}", sugg_t.getTeacherName());
					logger.debug("student name:{} ", sugg_s.getStudentName());

					Suggestion sugg=new Suggestion();
					sugg.setLevel(0);
					sugg.setPaperId(0);

					sugg.setReceiverId(accountService.getAccountByAccountname(sugg_s.getStudentNumber()).getAccountId());
					sugg.setSuggestContent(addition);
					Timestamp time = new Timestamp(new Date().getTime());
					sugg.setSuggestTime(time);
					sugg.setUserId(accountService.getAccountByAccountname(sugg_t.getTeacherNumber()).getAccountId());
					sugg.setSenderName(sugg_t.getTeacherName());
					sugg.setSuggestTitle("初稿未通过，导师提交批注");

					try {
						int new_sugg_id = suggestionService.addSuggestion(sugg);
						String affix=getRelativeFilePath(views
								.getAbsolutePath());
						Accessory a = new Accessory();
						a.setPath(affix);
						a.setSuggestionId(new_sugg_id);//添加附件
						suggestionService.addAccessory(a);

					} catch (Exception e) {
						e.printStackTrace();
					}	
				}
			} catch (Exception e) {
				e.printStackTrace();
				result_json = FAIL;
			}
		}
		//完成任务，根据isPassed转向不同的task
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("isPassed", result);
		activitiAPIUtils.completeTask(taskIdS, data);

		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得通过重复率列表
	 */
	@RequestMapping(value="/tutor/getdetectionpassed.do")
	@ResponseBody
	public void getDetectionPassed(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		List<Paper> list = paperService.getPapersByState(Constants.JUDGE_READY);
		ArrayList<JsonPaper> json_list = new ArrayList<JsonPaper>();
		for(Paper p : list){
			Student s  = studentService.getStudentById(p.getStudentId());
			JsonPaper jsonPaper = JsonPaper.paper2JsonPaper(p, s);
			json_list.add(jsonPaper);
		}
		JSONArray list_json = JSONArray.fromObject(json_list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 获得教师需要评审的list
	 */
	@RequestMapping(value="/tutor/reviewlist.do")
	@ResponseBody
	public void getReviewList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<TeacherJudgeTask> list = new ArrayList<TeacherJudgeTask>();
		List<Task> taskList = null;

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		int teacherId = (Integer) session.getAttribute("teacherId");
		try{
			Teacher teacher = teacherService.getTeacherById(teacherId);
			//判断该老师是内部还是外部教师
			if(teacher.getTeacherClasses() == Constants.INNERTEACHER) {
				taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Internal Review");
			}else if(teacher.getTeacherClasses() == Constants.OUTERTEACHER) {
				taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "External Review");
			}

			for(Task task : taskList) {
				ProcessInstance instance = activitiAPIUtils.getProcessInstance(task.getId());
				if(instance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(instance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					logger.debug("paper_id: {}", paper.getPaperId());
					Judge judge = judgeService.findJudgeByPaperIdandTeacherId(paper.getPaperId(), teacherId);
					list.add(TeacherJudgeTask.toTeacherJudgeTask(student, paper,judge.getJudgeDeadline(), Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 评审老师提交评审意见
	 * */
	@RequestMapping(value="/tutor/submitreview.do")
	@ResponseBody
	public void submitReview(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("paperid")String paperIdS, @RequestParam("taskid") String taskIdS, 
			@RequestParam("result")String resultS, 
			@RequestParam("judge_content_teacher") String toteacher, //评审老师给指导老师的意见
			@RequestParam("judge_content_student") String tostudent) { //评审老师给学生的意见
		String actorNo =  (String)request.getSession().getAttribute("actorNo");
		Integer paperId = Integer.parseInt(paperIdS);
		Long.parseLong(taskIdS);
		boolean result = resultS.equals("passed") ? true : false ; 
		String result_json = "";
		try{
			Judge judge = judgeService.findJudgeByPaperIdandTeacherId(paperId, (Integer)request.getSession().getAttribute("teacherId"));
			judge.setJudgeContentStudent(tostudent);
			judge.setJudgeContentTeacher(toteacher);
			judge.setJudgeResult(request.getParameter("result"));
			// 上传文件
			int studentId = paperService.getPaperByPaperId(paperId).getStudentId();
			String studentNumber = studentService.getStudentById(studentId).getStudentNumber();
			File save = FileOperateUtil.Upload(request,
					getAbsoluteFileDir(studentNumber), "review_affix_" + actorNo, "submit_file");
			if (save == null) {
				result_json = FAIL;
				JSONObject jsonobj = new JSONObject();
				jsonobj.put("result_json", result_json);
				jsonUtil.sendJson(response, jsonobj);
			}
			judge.setJudgeAffix(getRelativeFilePath(save.getAbsolutePath()));

			Map<String, Object> data = new HashMap<String, Object>();
			data.put("review", result);
			judgeService.updateJudge(judge);
			//完成任务
			activitiAPIUtils.completeTask(taskIdS, data);
			result_json = SUCCESS;

			//系统向学生发起会话
			List<Judge> judgeList=judgeService.findJudgeByPaperId(paperId);

			Teacher judge1 = teacherService.getTeacherById(judgeList.get(0).getTeacherId());
			Teacher judge2 = teacherService.getTeacherById(judgeList.get(1).getTeacherId());
			Teacher currentTeacher = teacherService.getTeacherByTeacherNumber(actorNo);

			if(currentTeacher.getTeacherId() == judge1.getTeacherId()) {
				//do nothing
			} else if (currentTeacher.getTeacherId() == judge2.getTeacherId()) {
				//由于要给judge2发消息，需要保证judge1为当前老师
				judge2 = judge1;
				judge1 = currentTeacher;
			}

			logger.debug("judge1: {}", judge1.getTeacherName());
			logger.debug("judge2: {}", judge2.getTeacherName());
			Suggestion sugg1=new Suggestion();//评审老师向学生发起会话
			Suggestion sugg2=new Suggestion();//评审老师向老师发起的会话
			//向学生的会话
			sugg1.setLevel(0);
			sugg1.setPaperId(0);
			sugg1.setReceiverId(accountService.getAccountByAccountname(studentNumber).getAccountId());
			sugg1.setSuggestContent(tostudent);
			Timestamp time = new Timestamp(new Date().getTime());
			sugg1.setSuggestTime(time);
			sugg1.setUserId(accountService.getAccountByAccountname(judge1.getTeacherNumber()).getAccountId());
			sugg1.setSenderName(judge1.getTeacherName());
			sugg1.setSuggestTitle("评审老师提交评审");

			//向老师的会话
			sugg2.setLevel(0);
			sugg2.setPaperId(0);
			sugg2.setReceiverId(accountService.getAccountByAccountname(judge2.getTeacherNumber()).getAccountId());
			sugg2.setSuggestContent("给学生的附言" + tostudent+"\n" + "给老师的附言" + toteacher+"\n");
			Timestamp time1 = new Timestamp(new Date().getTime());
			sugg2.setSuggestTime(time1);
			sugg2.setUserId(accountService.getAccountByAccountname(judge1.getTeacherNumber()).getAccountId());
			sugg2.setSenderName(judge1.getTeacherName());
			sugg2.setSuggestTitle("评审老师提交评审");

			try {
				int new_sugg_id1 = suggestionService.addSuggestion(sugg1);
				int new_sugg_id2=suggestionService.addSuggestion(sugg2);
				String affix=getRelativeFilePath(save
						.getAbsolutePath());
				Accessory a = new Accessory();
				a.setPath(affix);
				a.setSuggestionId(new_sugg_id1);//添加附件
				suggestionService.addAccessory(a);

				Accessory a1 = new Accessory();
				a1.setPath(affix);
				a1.setSuggestionId(new_sugg_id2);//添加附件
				suggestionService.addAccessory(a1);
			} catch (Exception e) {
				e.printStackTrace();
			}	
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 答辩前待定稿列表（导师）
	 * @author Jason
	 */
	@RequestMapping(value="/tutor/beforedefenselist.do")
	public void getBeforeDefenseList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<BeforeDefenseTask> list = new ArrayList<BeforeDefenseTask>();

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Defense Finalize Before");

			for(Task task : taskList) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					list.add(BeforeDefenseTask.toBeforeDefenseTask(student, paper, Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 通过答辩前定稿（导师）
	 * @author Jason
	 */
	@RequestMapping(value = "/tutor/beforedefensedecision.do")
	public void beforeDefenseDecision(HttpServletRequest request, HttpServletResponse response,ModelMap model, 
			@RequestParam("jsonstr") String jsonstr) {
		JSONObject judge_json = JSONObject.fromObject(jsonstr);
		Integer paperId = judge_json.getInt("paperid");
		long taskId = judge_json.getLong("taskid");
		HttpSession session = request.getSession();
		session.getAttribute("actorNo");

		String result_json = "";
		try {
			Paper paper = paperService.getPaperByPaperId(paperId);
			if(paper != null){
				paper.setPaperState(Constants.DEFENSE_READY);
				paperService.updatePaper(paper);
				activitiAPIUtils.completeTask(String.valueOf(taskId));
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 答辩待决议列表（答辩秘书）
	 * @author Jason
	 */
	@RequestMapping(value="/tutor/defenselist.do")
	public void getDefenseList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<DefenseTask> list = new ArrayList<DefenseTask>();

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Defense Decision");
			for(Task task : taskList) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					list.add(DefenseTask.toDefenseTask(student, paper, Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 答辩决议（文秘）
	 * @author Jason
	 */
	@RequestMapping(value = "/tutor/defensedecision.do")
	public void defenseDecision(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("paperid") String paperIdS, @RequestParam("taskid") String taskIdS, 
			@RequestParam("result") String result, @RequestParam("defense_content") String defenseContent, 
			@RequestParam("three_one") String threeOne) {
		logger.info("defense decision");
		Integer paperId = Integer.parseInt(paperIdS);
		logger.debug("paper ID: {}", paperId);
		Long.parseLong(taskIdS);
		String actorNo = (String) request.getSession().getAttribute("actorNo");

		String result_json = "";
		try {
			Defence defence = defenceService.findDefenceByPaperIdandTeacherId(paperId, (Integer)request.getSession().getAttribute("teacherId"));
			if(defence != null){
				defence.setDefenceContent(defenseContent);
				defence.setDefenceResult(result);
				defence.setThreeOne(threeOne);
				defence.setDefenceCount(defence.getDefenceCount()+1);
				// 上传文件
				int studentId = paperService.getPaperByPaperId(paperId).getStudentId();
				String studentNumber = studentService.getStudentById(studentId).getStudentNumber();
				File save = FileOperateUtil.Upload(request,
						getAbsoluteFileDir(studentNumber), "defense_affix"+actorNo, "submit_file");
				if (save == null) {
					result_json = FAIL;
					JSONObject jsonobj = new JSONObject();
					jsonobj.put("result_json", result_json);
					jsonUtil.sendJson(response, jsonobj);
				}
				defence.setDefenceAffix(getRelativeFilePath(save.getAbsolutePath()));
				defenceService.updateDefence(defence);
			}
			Paper paper = paperService.getPaperByPaperId(paperId);
			if(paper != null){
				if(result.equals("passed")){
					paper.setPaperState(Constants.DEFENSE_SUCCESS);
				}else if(result.equals("reprieved")){
					paper.setPaperState(Constants.REPRIEVE);
				}else{
					paper.setPaperState(Constants.DRAFT_COMPLETED);	// 不确定，流程图指向 “未提交”状态，需求是“完成初稿”
				}

				Map<String, Object> data = new HashMap<String, Object>();
				data.put("defense", result);

				paperService.updatePaper(paper);
				activitiAPIUtils.completeTask(taskIdS, data);
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 通过答辩的论文列表（导师）
	 */
	@RequestMapping(value="/tutor/passdefenselist.do")
	public void getPassDefenseList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<DefenseTask> list = new ArrayList<DefenseTask>();

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Defense Finalize");
			for(Task task : taskList) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					list.add(DefenseTask.toDefenseTask(student, paper, Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 通过答辩后定稿（导师）
	 */
	@RequestMapping(value = "/tutor/afterdefensedecision.do")
	public void afterDefenseDecision(HttpServletRequest request, HttpServletResponse response,
			ModelMap model, @RequestParam("jsonstr") String jsonstr) {
		String result_json = "";
		JSONObject judge_json = JSONObject.fromObject(jsonstr);
		Integer paperId = judge_json.getInt("paperid");
		long taskId = judge_json.getLong("taskid");
		HttpSession session = request.getSession();
		session.getAttribute("actorNo");
		try {
			Paper paper = paperService.getPaperByPaperId(paperId);
			if(paper != null){
				paper.setPaperState(Constants.FINALIZED_AFTER_DEFENSE);
				paperService.updatePaper(paper);
				activitiAPIUtils.completeTask(String.valueOf(taskId));
			}
			result_json = SUCCESS;
		} catch (Exception e) {
			result_json = FAIL;
			e.printStackTrace();
		}
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 暂缓后待定稿列表（导师）
	 * @author Jason
	 */
	@RequestMapping(value="/tutor/reprievedlist.do")
	public void getReprievedList(HttpServletRequest request,HttpServletResponse response, ModelMap model){
		String result_json = "";
		List<DefenseTask> list = new ArrayList<DefenseTask>();

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Reprieve Finalize");
			for(Task task : taskList) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					list.add(DefenseTask.toDefenseTask(student, paper, Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 暂缓后定稿决议（导师）
	 * @author Jason
	 */
	@RequestMapping(value = "/tutor/afterreprievedecision.do")
	public void afterReprieveDecision(HttpServletRequest request, HttpServletResponse response,ModelMap model, 
			@RequestParam("jsonstr") String jsonstr) {
		HttpSession session = request.getSession();
		session.getAttribute("actorNo");
		JSONObject judge_json = JSONObject.fromObject(jsonstr);
		Integer paperId = judge_json.getInt("paperid");
		long taskId = judge_json.getLong("taskid");

		String result_json = "";
		try {
			Paper paper = paperService.getPaperByPaperId(paperId);
			if(paper!=null){
				paper.setPaperState(Constants.FINALIZED_AFTER_REPRIEVE);
				paperService.updatePaper(paper);
				activitiAPIUtils.completeTask(String.valueOf(taskId));
			}
			result_json = SUCCESS;
		} catch (Exception e) {
			result_json = FAIL;
			e.printStackTrace();
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 暂缓评审待决议列表（答辩评委）
	 */
	@RequestMapping(value="/tutor/reprievedecisionlist.do")
	public void getReprieveDecisionList(HttpServletRequest request,HttpServletResponse response,ModelMap model){
		String result_json = "";
		List<DefenseTask> list = new ArrayList<DefenseTask>();

		HttpSession session = request.getSession();
		String actorNo = (String)session.getAttribute("actorNo");
		try{
			List<Task> taskList = activitiAPIUtils.getAssignedTaskByNameAndUserId(actorNo, "Reprieve Decision");
			for(Task task : taskList) {
				ProcessInstance processInstance = activitiAPIUtils.getProcessInstance(task.getId());

				if(processInstance != null) {
					int studentId = (Integer) activitiAPIUtils.getVariable(processInstance.getId(), "studentId");
					Paper paper = paperService.getPaperByStudentId(studentId);
					Student student = studentService.getStudentById(paper.getStudentId());
					list.add(DefenseTask.toDefenseTask(student, paper, Long.parseLong(task.getId())));
				}
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}
		JSONArray list_json = JSONArray.fromObject(list);
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonobj.put("list", list_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 暂缓评审决议（答辩评委）
	 * @author Jason
	 */
	@RequestMapping(value = "/tutor/reprievedecision.do")
	public void reprieveDecision(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("paperid") String paperidS, @RequestParam("taskid") String taskIdS, 
			@RequestParam("result") String resultS, @RequestParam("reprieve_content") String reprieveContent) {
		Integer paperId = Integer.parseInt(paperidS);
		Long.parseLong(taskIdS);
		boolean result = (resultS.equals("pass")) ? true: false;
		String actorNo = (String) request.getSession().getAttribute("actorNo");
		String result_json = "";
		try {
			Defence defence = defenceService.findDefenceByPaperIdandTeacherId(paperId, (Integer)request.getSession().getAttribute("teacherId"));
			if(defence!=null){
				defence.setDefenceContent(reprieveContent);
				defence.setDefenceResult(request.getParameter("result"));
				defence.getTeacherType();
				Map<String, Object> data = new HashMap<String, Object>();
				logger.debug("reprieve", result);
				data.put("reprieve", result);
				// 上传文件
				int studentId = paperService.getPaperByPaperId(paperId).getStudentId();
				String studentNumber = studentService.getStudentById(studentId).getStudentNumber();
				File save = FileOperateUtil.Upload(request,
						getAbsoluteFileDir(studentNumber), "reprieve_affix"+actorNo, "submit_file");
				if (save == null) {
					result_json = FAIL;
					JSONObject jsonobj = new JSONObject();
					jsonobj.put("result_json", result_json);
					jsonUtil.sendJson(response, jsonobj);
				}
				defence.setDefenceAffix(getRelativeFilePath(save.getAbsolutePath()));
				defenceService.updateDefence(defence);
				activitiAPIUtils.completeTask(taskIdS, data);
			}
			result_json = SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			result_json = FAIL;
		}

		JSONObject jsonobj =  new JSONObject();
		jsonobj.put("result_json", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 下载论文
	 * @param request
	 * @param response
	 * @param model
	 * @param path
	 */
	@RequestMapping(value = "/tutor/downloadpaper.do", method = RequestMethod.POST)
	@ResponseBody
	@Transactional(rollbackFor = Exception.class)
	public void downloadpaper(HttpServletRequest request,
			HttpServletResponse response, ModelMap model, @RequestParam("path") String path) {
		String absolutepath = getAbsoluteFilePath(path);
		FileOperateUtil.Download(response, absolutepath);
	}

	/**
	 * 下载开题报告
	 * @param request
	 * @param response
	 * @param model
	 * @param path
	 */
	@RequestMapping(value = "/tutor/downloadproposal.do", method = RequestMethod.POST)
	@ResponseBody
	@Transactional(rollbackFor = Exception.class)
	public void downloadproposal(HttpServletRequest request,
			HttpServletResponse response, ModelMap model, @RequestParam("path") String path) {
		String absolutepath = getAbsoluteFilePath(path);
		FileOperateUtil.Download(response, absolutepath);
	}	

	private String getAbsoluteFileDir(String studentid) {
		String rootdirectory = System.getProperty("web.root");
		String dir = rootdirectory + getRelativeFileDir(studentid);
		File dirf = new File(dir);
		dirf.mkdirs();
		return dir;
	}

	private String getRelativeFileDir(String studentid) {
		String dir = "document" + File.separator + studentid;
		return dir;
	}

	private String getRelativeFilePath(String absolutepath) {
		return absolutepath.replace(System.getProperty("web.root"), "");
	}

	private String getAbsoluteFilePath(String relativepath) {
		return System.getProperty("web.root") + relativepath;
	}

	/**
	 * 导入成绩单excel
	 */
	@RequestMapping(value = "/teacher/importTranscriptExcel.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void importTranscriptExcel(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		response.setContentType("text/html;charset=UTF-8");
		System.out.println("UPLOAD_EXCEL_HERE_REACHED");
		String result = "";
		JSONObject jsonobj = new JSONObject();
		try {   
			ExcelUtil excel=new ExcelUtil();
			List<ArrayList<String>> dataLst=excel.
					importExcel(request, response,"file");//调用静态类ExcelUitl导入EXCEL	
			Iterator<ArrayList<String>> it = dataLst.iterator();
			it.next();
			while (it.hasNext()) {
				ArrayList<String> innerLst = it.next();
				StudentCourseInfo studentCourseInfo = new StudentCourseInfo();
				if(!innerLst.get(0).equals("")){
					studentCourseInfo.setCourseNo(innerLst.get(0));
					studentCourseInfo.setCourseName(innerLst.get(1));
					studentCourseInfo.setStudentNo(innerLst.get(2));

					studentCourseInfo.setStudentName(innerLst.get(3));		
					studentCourseInfo.setDate(Integer.getInteger(innerLst.get(4)));
					studentCourseInfo.setScore(Integer.getInteger(innerLst.get(5)));

					try{
						// Add studentCourseInfo
						studentCourseInfoService.addStudentCourseInfo(studentCourseInfo);
					}catch(Exception e){
						e.printStackTrace();
					}
				}
				result = "导入成功";
			}
		}catch(Exception e){
			if (result != null)
				result = "请输入正确的文件,格式依照本页成绩单列表";
			e.printStackTrace();
		}
		jsonobj.put("result", result);
		jsonUtil.sendJson(response, jsonobj);
	}

	/**
	 * 添加单条成绩信息
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value = "/tutor/importTransript.do")
	@ResponseBody
	@Transactional(rollbackFor=Exception.class)
	public void importTransript(HttpServletRequest request, HttpServletResponse response, ModelMap model) {
		String infoStr = request.getParameter("jsonStr");
		JSONObject info_json = JSONObject.fromObject(infoStr);

		StudentCourseInfo studentCourseInfo = new StudentCourseInfo();

		studentCourseInfo.setCourseNo((String)info_json.getString("courseNo"));
		studentCourseInfo.setStudentNo((String)info_json.getString("studentNo"));
		studentCourseInfo.setScore(Integer.getInteger((String)info_json.getString("score")));
		studentCourseInfo.setCourseName((String)info_json.getString("courseName"));
		studentCourseInfo.setStudentName((String)info_json.getString("studentName"));		
		studentCourseInfo.setDate(Integer.getInteger((String)info_json.getString("date")));		

		String result_json = "";
		try {
			studentCourseInfoService.addStudentCourseInfo(studentCourseInfo);
			result_json = SUCCESS;
		} catch (Exception e) {
			result_json = FAIL;
			logger.error("添加成绩信息失败：", e);
		}
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("result", result_json);
		jsonUtil.sendJson(response, jsonobj);
	}

	/*
	 * 编辑成绩
	 */
	@RequestMapping(value = "/tutor/editgrade.do")
	@ResponseBody
	@Transactional(rollbackFor = Exception.class)
	public void editCourse(HttpServletRequest request, HttpServletResponse response, ModelMap model, 
			@RequestParam("oper") String oper) throws Exception {
		if(oper != null&&oper.equals("del")){
			int courseInfoId=Integer.parseInt(request.getParameter("courseInfoId"));
			//int courseId=Integer.parseInt(request.getParameter("courseId"));
			try{
				//courseService.deleteCourseInfo(courseId);
				StudentCourseInfo courseInfo = studentCourseInfoService.getInfoById(courseInfoId);
				studentCourseInfoService.deleteStudentCourseInfo(courseInfo);
			}catch(Exception e){
				e.printStackTrace();
			}
		}else if(oper!=null){
			String courseNo=request.getParameter("courseNo");
			String courseName=request.getParameter("courseName");
			String studentNo=request.getParameter("studentNo");
			String studentName=request.getParameter("studentName");
			String score=request.getParameter("score");

			StudentCourseInfo newCourseInfo=new StudentCourseInfo();
			newCourseInfo.setCourseName(courseName);
			newCourseInfo.setCourseNo(courseNo);
			newCourseInfo.setScore(Integer.valueOf(score));			
			newCourseInfo.setStudentName(studentName);
			newCourseInfo.setStudentNo(studentNo);
			try{
				if(oper.equals("edit")){
					newCourseInfo.setCourseNo(request.getParameter("courseNo"));
				}else if(oper.equals("add")){
					studentCourseInfoService.addStudentCourseInfo(newCourseInfo);
				}
			}catch(Exception e){
				e.printStackTrace();
			}
		}
	}

	/**
	 * 所有费用列表
	 * @param request
	 * @param response
	 * @param model
	 */
	@RequestMapping(value="/tutor/getAllFees.do")
	@ResponseBody
	public void getAllFees(HttpServletRequest request, HttpServletResponse response, ModelMap model){
		int teacherId = (Integer) request.getSession().getAttribute("teacherId");
		List<Fee> fees = feeService.getFeesByTeacherId(teacherId);
		List<JsonFee> jsonFees=new ArrayList<JsonFee>();
		for (int i=0;i<fees.size();i++){
			JsonFee jFee=new JsonFee(fees.get(i));
			jFee.setStudentName(studentService.getStudentById(jFee.getStudentId()).getStudentName());
			jFee.setStudentNum(studentService.getStudentById(jFee.getStudentId()).getStudentNumber());
			//jFee.setTeacherName(teacherService.getTeacherById(jFee.getTeacherId()).getTeacherName());
			//jFee.setTeacherNum(teacherService.getTeacherById(jFee.getTeacherId()).getTeacherNumber());
			jsonFees.add(jFee);
		}

		JSONArray feelist_jsonobj = JSONArray.fromObject(jsonFees);	
		JSONObject jsonobj = new JSONObject();
		jsonobj.put("list", feelist_jsonobj);
		jsonUtil.sendJson(response, jsonobj);
	}
}
