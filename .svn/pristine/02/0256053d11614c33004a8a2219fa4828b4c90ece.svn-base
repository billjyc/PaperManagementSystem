package nju.software.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.persistence.EntityManagerFactory;

import nju.software.dao.StudentDAO;
import nju.software.dao.TeacherDAO;
import nju.software.entity.Classes;
import nju.software.entity.HeadTeacher;
import nju.software.entity.Teacher;
import nju.software.entity.TeachingPoint;
import nju.software.service.ClassesService;
import nju.software.service.TeacherService;
import nju.software.service.TeachingPointService;
import nju.software.util.Constants;

import org.drools.SystemEventListener;
import org.drools.SystemEventListenerFactory;
import org.jbpm.task.User;
import org.jbpm.task.service.TaskService;
import org.jbpm.task.service.TaskServiceSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service("teacherServiceImpl")
public class TeacherServiceImpl implements TeacherService {
	@Autowired
	private TeacherDAO teacherDAO;
	@Autowired
	private StudentDAO studentDAO;
	@Autowired
	private EntityManagerFactory emf;

	
	
	
	public Teacher addTeacherInfo(Teacher teacher) throws Exception {
		// TODO Auto-generated method stub
		try {
			teacherDAO.save(teacher);
			SystemEventListener listener = SystemEventListenerFactory
					.getSystemEventListener();
			TaskService taskService = new TaskService(emf, listener);
			TaskServiceSession taskSession = taskService.createSession();
			taskSession.addUser(new User(teacher.getTeacherNumber()));
		} catch (Exception e) {
			throw e;

		}
		return teacher;
	}

	public boolean deleteTeacherInfo(int teacherId) {
		// TODO Auto-generated method stub
		try {
			Teacher teacher = teacherDAO.findById(teacherId);
			teacherDAO.delete(teacher);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public boolean deleteTeacherInfoByNumber(String teacherNumber) {
		try {
			Teacher teacher = teacherDAO.findByTeacherNumber(teacherNumber)
					.get(0);
			teacherDAO.delete(teacher);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;

	};

	public Teacher updateTeacherInfo(Teacher teacher) {
		try {
			teacherDAO.update(teacher);
			SystemEventListener listener = SystemEventListenerFactory
					.getSystemEventListener();
			TaskService taskService = new TaskService(emf, listener);
			TaskServiceSession taskSession = taskService.createSession();
			taskSession.addUser(new User(teacher.getTeacherNumber()));
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return teacher;

	}

	public Teacher getTeacherByStudentId(int studentId) {
		// TODO Auto-generated method stub
		Teacher teacher = null;
		try {
			Integer tid = studentDAO.findById(studentId).getTeacherId();
			if(tid==null){
				return null;
			}
			teacher = teacherDAO.findById(tid);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return teacher;
	}

	public List<Teacher> getAllTeachers() {
		List<Teacher> result = null;
		try {
			result = teacherDAO.findAll();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return result;
	}

	public List<Object> getAllLimit(HashMap<String, Object> params) {
		List<Object> result = null;
		try {
			result = teacherDAO.findAllLimit(params);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return result;
	}

	public Teacher getTeacherById(int teacherId) {		
		Teacher teacher=null;
		try {
			teacher = teacherDAO.findById(teacherId);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return teacher;
	}

	public Teacher getTeacherByTeacherNumber(String teacherNumber) {

		List<Teacher> teacherList = teacherDAO
				.findByTeacherNumber(teacherNumber);
		if (teacherList != null && !teacherList.isEmpty()) {
			return teacherList.get(0);
		}
		return null;
	}

	public Teacher getTeacherByTeacherName(String teacherName) {
		List<Teacher> teacherList = teacherDAO.findByTeacherName(teacherName);
		if (teacherList != null && !teacherList.isEmpty()) {
			return teacherList.get(0);
		} else
			return null;
	}

	public List<Teacher> getInnerTeachers() {
		return teacherDAO.findByTeacherClasses(Constants.INNERTEACHER);

	}

	public List<Teacher> getOuterTeachers() {
		return teacherDAO.findByTeacherClasses(Constants.OUTERTEACHER);
	}


	public String formatQualification(int qualify) {
		if (qualify == Constants.ACADEMIC_DOCTOR_TUTOR)
			return "博导";
		else if (qualify == Constants.ACADEMIC_MASTER_TUTOR)
			return "工学硕士导师";
		else
			return "工程硕士导师";

	}

	public int formatQualification(String qualify) {
		if (qualify.equals("博导"))
			return Constants.ACADEMIC_DOCTOR_TUTOR;
		else if (qualify.equals("工学硕士导师"))
			return Constants.ACADEMIC_MASTER_TUTOR;
		else if (qualify.equals("工程硕士导师"))
			return Constants.ENGINEERING_MASTER_TUTOR;
		else
			return Constants.ERROR_INPUT;
	}

	public String formatClasses(int classes) {
		if (classes == Constants.INNERTEACHER) {
			return "校内";
		} else {
			return "校外";
		}
	}

	public int formatClasses(String classes) {
		if (classes.equals("本校"))
			return Constants.INNERTEACHER;
		else if (classes.equals("外校"))
			return Constants.OUTERTEACHER;
		else
			return Constants.ERROR_INPUT;
	}

	public int formatJobTitle(String jobTitle) {
		if (jobTitle.equals("讲师"))
			return Constants.INSTRUCTOR;
		else if (jobTitle.equals("高级工程师"))
			return Constants.SENIORENGINEER;
		else if (jobTitle.equals("副教授"))
			return Constants.ASSOCIATEPROFESSOR;
		else
			return Constants.FULLPROFESSOR;
	}

	public String formatJobTitle(int jobTitle) {
		if (jobTitle == Constants.INSTRUCTOR)
			return "讲师";
		else if (jobTitle == Constants.SENIORENGINEER)
			return "高级工程师";
		else if (jobTitle == Constants.ASSOCIATEPROFESSOR)
			return "副教授";
		else
			return "教授";
	}

	public int formatEducation(String education) {
		if (education.equals("本科"))
			return Constants.BACHELOR;
		else if (education.equals("硕士"))
			return Constants.MASTER;
		else if (education.equals("博士"))
			return Constants.DOCTOR;
		else
			return Constants.POSTDOCTOR;
	}

	public String formatEducation(int education) {
		if (education == Constants.BACHELOR)
			return "本科";
		else if (education == Constants.MASTER)
			return "硕士";
		else if (education == Constants.DOCTOR)
			return "博士";
		else
			return "博士后";
	}


}
